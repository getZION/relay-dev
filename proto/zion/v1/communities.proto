syntax = "proto3";

package proto.zion.v1;

option go_package = "github.com/getzion/relay/gen/zion/v1";

import "proto/zion/v1/users.proto";
import "proto/zion/v1/tags.proto";
import "proto/protoc-gen-gorm/options/gorm.proto";

message Community {
  option (gorm.opts).ormable = true;
  // The community's unique ID (primary key)
  int64 id = 1 [(gorm.field).tag = {
    unique: true
    primary_key: true
  }];
  // Community id unique across Zion - Required; must be uuid v4
  string zid = 2;
  // The name of the community - Required; unique
  string name = 3 [(gorm.field).tag = { not_null: true, unique: true }];
  // Owner DID - Required
  string owner_did = 4 [(gorm.field).tag = { not_null: true }];
  // Owner username - Required
  string owner_username = 5 [(gorm.field).tag = { not_null: true }];
  // The community's description or mission statement - Required
  string description = 6 [(gorm.field).tag = { not_null: true }];
  // Image URL - Optional
  string img = 7;
  // How much it costs to join - Required
  int64 price_to_join = 8 [(gorm.field).tag = { not_null: true }];
  // How much each message costs - Required
  int64 price_per_message = 9 [(gorm.field).tag = { not_null: true }];
  // Escrow amount - Required
  int64 escrow_amount = 10 [(gorm.field).tag = { not_null: true }];
  // When last active - Optional
  int64 last_active = 11;
  // Is this a public community? - Required; defaults true
  bool public = 12 [(gorm.field).tag = { default: "true" }];
  // Deleted - Optional, defaults 0
  bool deleted = 13;
  // Created when? - Required
  int64 created = 14;
  // Updated when? - Optional
  int64 updated = 15;
  repeated User users = 16 [(gorm.field).many_to_many = {}];
  repeated Tag tags = 17 [(gorm.field).many_to_many = {}];
}
