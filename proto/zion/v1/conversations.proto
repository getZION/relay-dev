syntax = "proto3";

package proto.zion.v1;

option go_package = "github.com/getzion/relay/gen/zion/v1";

import "proto/protoc-gen-gorm/options/gorm.proto";

service ConversationService {
  // Create a conversation
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {}
  // Delete a comment of mine, or in a conversation I started
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (gorm.method).object_type = "Comment";
  }
  // Delete a conversation I started
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {
    option (gorm.method).object_type = "Conversation";
  }
  // Get list of my activity (notifications)
  rpc GetActivity(GetActivityRequest) returns (GetActivityResponse) {}
  // Get a conversation and its comments
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse) {}
  // Get my feed of conversations
  rpc GetFeed(GetFeedRequest) returns (GetFeedResponse) {}
}

message Conversation {
  option (gorm.opts).ormable = true;
  // The community's unique ID (primary key)
  int64 id = 1 [(gorm.field).tag = {
    unique: true
    primary_key: true
  }];
  // Text
  string text = 2 [(gorm.field).tag = { not_null: true }];
}

message Comment {
  option (gorm.opts).ormable = true;
  // The community's unique ID (primary key)
  int64 id = 1 [(gorm.field).tag = {
    unique: true
    primary_key: true
  }];
  // Text
  string text = 2 [(gorm.field).tag = { not_null: true }];
}

message CreateConversationRequest {
  Conversation payload = 1;
}
message CreateConversationResponse {
  Conversation result = 1;
}
message DeleteCommentRequest {
  int64 id = 1;
}
message DeleteCommentResponse {}
message DeleteConversationRequest {
  int64 id = 1;
}
message DeleteConversationResponse {}
message GetActivityRequest {}
message GetActivityResponse {}
message GetConversationRequest {}
message GetConversationResponse {}
message GetFeedRequest {}
message GetFeedResponse {}
