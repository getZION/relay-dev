/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/protoc-gen-gorm/options/gorm.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace gorm {
    export class GormFileOptions extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new GormFileOptions({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GormFileOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GormFileOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GormFileOptions {
            return GormFileOptions.deserialize(bytes);
        }
    }
    export class GormMessageOptions extends pb_1.Message {
        constructor(data?: any[] | {
            ormable: boolean;
            include: ExtraField[];
            table?: string;
            multi_account?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                this.ormable = data.ormable;
                this.include = data.include;
                if ("table" in data && data.table != undefined) {
                    this.table = data.table;
                }
                if ("multi_account" in data && data.multi_account != undefined) {
                    this.multi_account = data.multi_account;
                }
            }
        }
        get ormable() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set ormable(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get include() {
            return pb_1.Message.getRepeatedWrapperField(this, ExtraField, 2) as ExtraField[];
        }
        set include(value: ExtraField[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get table() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set table(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get multi_account() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set multi_account(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            ormable: boolean;
            include: ReturnType<typeof ExtraField.prototype.toObject>[];
            table?: string;
            multi_account?: boolean;
        }) {
            const message = new GormMessageOptions({
                ormable: data.ormable,
                include: data.include.map(item => ExtraField.fromObject(item))
            });
            if (data.table != null) {
                message.table = data.table;
            }
            if (data.multi_account != null) {
                message.multi_account = data.multi_account;
            }
            return message;
        }
        toObject() {
            const data: {
                ormable: boolean;
                include: ReturnType<typeof ExtraField.prototype.toObject>[];
                table?: string;
                multi_account?: boolean;
            } = {
                ormable: this.ormable,
                include: this.include.map((item: ExtraField) => item.toObject())
            };
            if (this.table != null) {
                data.table = this.table;
            }
            if (this.multi_account != null) {
                data.multi_account = this.multi_account;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ormable !== undefined)
                writer.writeBool(1, this.ormable);
            if (this.include !== undefined)
                writer.writeRepeatedMessage(2, this.include, (item: ExtraField) => item.serialize(writer));
            if (typeof this.table === "string" && this.table.length)
                writer.writeString(3, this.table);
            if (this.multi_account !== undefined)
                writer.writeBool(4, this.multi_account);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GormMessageOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GormMessageOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ormable = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.include, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ExtraField.deserialize(reader), ExtraField));
                        break;
                    case 3:
                        message.table = reader.readString();
                        break;
                    case 4:
                        message.multi_account = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GormMessageOptions {
            return GormMessageOptions.deserialize(bytes);
        }
    }
    export class ExtraField extends pb_1.Message {
        constructor(data?: any[] | {
            type: string;
            name: string;
            tag?: GormTag;
            package?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                this.type = data.type;
                this.name = data.name;
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("package" in data && data.package != undefined) {
                    this.package = data.package;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tag() {
            return pb_1.Message.getWrapperField(this, GormTag, 3) as GormTag;
        }
        set tag(value: GormTag) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get package() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set package(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            type: string;
            name: string;
            tag?: ReturnType<typeof GormTag.prototype.toObject>;
            package?: string;
        }) {
            const message = new ExtraField({
                type: data.type,
                name: data.name
            });
            if (data.tag != null) {
                message.tag = GormTag.fromObject(data.tag);
            }
            if (data.package != null) {
                message.package = data.package;
            }
            return message;
        }
        toObject() {
            const data: {
                type: string;
                name: string;
                tag?: ReturnType<typeof GormTag.prototype.toObject>;
                package?: string;
            } = {
                type: this.type,
                name: this.name
            };
            if (this.tag != null) {
                data.tag = this.tag.toObject();
            }
            if (this.package != null) {
                data.package = this.package;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(2, this.name);
            if (this.tag !== undefined)
                writer.writeMessage(3, this.tag, () => this.tag.serialize(writer));
            if (typeof this.package === "string" && this.package.length)
                writer.writeString(4, this.package);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtraField {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtraField();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.tag, () => message.tag = GormTag.deserialize(reader));
                        break;
                    case 4:
                        message.package = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtraField {
            return ExtraField.deserialize(bytes);
        }
    }
    export class GormFieldOptions extends pb_1.Message {
        constructor(data?: any[] | ({
            tag?: GormTag;
            drop?: boolean;
            reference_of?: string;
        } & (({
            has_one?: HasOneOptions;
            belongs_to?: never;
            has_many?: never;
            many_to_many?: never;
        } | {
            has_one?: never;
            belongs_to?: BelongsToOptions;
            has_many?: never;
            many_to_many?: never;
        } | {
            has_one?: never;
            belongs_to?: never;
            has_many?: HasManyOptions;
            many_to_many?: never;
        } | {
            has_one?: never;
            belongs_to?: never;
            has_many?: never;
            many_to_many?: ManyToManyOptions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[3, 4, 5, 6]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("drop" in data && data.drop != undefined) {
                    this.drop = data.drop;
                }
                if ("has_one" in data && data.has_one != undefined) {
                    this.has_one = data.has_one;
                }
                if ("belongs_to" in data && data.belongs_to != undefined) {
                    this.belongs_to = data.belongs_to;
                }
                if ("has_many" in data && data.has_many != undefined) {
                    this.has_many = data.has_many;
                }
                if ("many_to_many" in data && data.many_to_many != undefined) {
                    this.many_to_many = data.many_to_many;
                }
                if ("reference_of" in data && data.reference_of != undefined) {
                    this.reference_of = data.reference_of;
                }
            }
        }
        get tag() {
            return pb_1.Message.getWrapperField(this, GormTag, 1) as GormTag;
        }
        set tag(value: GormTag) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get drop() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set drop(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_one() {
            return pb_1.Message.getWrapperField(this, HasOneOptions, 3) as HasOneOptions;
        }
        set has_one(value: HasOneOptions) {
            pb_1.Message.setOneofWrapperField(this, 3, [3, 4, 5, 6], value);
        }
        get belongs_to() {
            return pb_1.Message.getWrapperField(this, BelongsToOptions, 4) as BelongsToOptions;
        }
        set belongs_to(value: BelongsToOptions) {
            pb_1.Message.setOneofWrapperField(this, 4, [3, 4, 5, 6], value);
        }
        get has_many() {
            return pb_1.Message.getWrapperField(this, HasManyOptions, 5) as HasManyOptions;
        }
        set has_many(value: HasManyOptions) {
            pb_1.Message.setOneofWrapperField(this, 5, [3, 4, 5, 6], value);
        }
        get many_to_many() {
            return pb_1.Message.getWrapperField(this, ManyToManyOptions, 6) as ManyToManyOptions;
        }
        set many_to_many(value: ManyToManyOptions) {
            pb_1.Message.setOneofWrapperField(this, 6, [3, 4, 5, 6], value);
        }
        get reference_of() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set reference_of(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get association() {
            const cases: {
                [index: number]: "none" | "has_one" | "belongs_to" | "has_many" | "many_to_many";
            } = {
                0: "none",
                3: "has_one",
                4: "belongs_to",
                5: "has_many",
                6: "many_to_many"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6])];
        }
        static fromObject(data: {
            tag?: ReturnType<typeof GormTag.prototype.toObject>;
            drop?: boolean;
            has_one?: ReturnType<typeof HasOneOptions.prototype.toObject>;
            belongs_to?: ReturnType<typeof BelongsToOptions.prototype.toObject>;
            has_many?: ReturnType<typeof HasManyOptions.prototype.toObject>;
            many_to_many?: ReturnType<typeof ManyToManyOptions.prototype.toObject>;
            reference_of?: string;
        }) {
            const message = new GormFieldOptions({});
            if (data.tag != null) {
                message.tag = GormTag.fromObject(data.tag);
            }
            if (data.drop != null) {
                message.drop = data.drop;
            }
            if (data.has_one != null) {
                message.has_one = HasOneOptions.fromObject(data.has_one);
            }
            if (data.belongs_to != null) {
                message.belongs_to = BelongsToOptions.fromObject(data.belongs_to);
            }
            if (data.has_many != null) {
                message.has_many = HasManyOptions.fromObject(data.has_many);
            }
            if (data.many_to_many != null) {
                message.many_to_many = ManyToManyOptions.fromObject(data.many_to_many);
            }
            if (data.reference_of != null) {
                message.reference_of = data.reference_of;
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: ReturnType<typeof GormTag.prototype.toObject>;
                drop?: boolean;
                has_one?: ReturnType<typeof HasOneOptions.prototype.toObject>;
                belongs_to?: ReturnType<typeof BelongsToOptions.prototype.toObject>;
                has_many?: ReturnType<typeof HasManyOptions.prototype.toObject>;
                many_to_many?: ReturnType<typeof ManyToManyOptions.prototype.toObject>;
                reference_of?: string;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag.toObject();
            }
            if (this.drop != null) {
                data.drop = this.drop;
            }
            if (this.has_one != null) {
                data.has_one = this.has_one.toObject();
            }
            if (this.belongs_to != null) {
                data.belongs_to = this.belongs_to.toObject();
            }
            if (this.has_many != null) {
                data.has_many = this.has_many.toObject();
            }
            if (this.many_to_many != null) {
                data.many_to_many = this.many_to_many.toObject();
            }
            if (this.reference_of != null) {
                data.reference_of = this.reference_of;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag !== undefined)
                writer.writeMessage(1, this.tag, () => this.tag.serialize(writer));
            if (this.drop !== undefined)
                writer.writeBool(2, this.drop);
            if (this.has_one !== undefined)
                writer.writeMessage(3, this.has_one, () => this.has_one.serialize(writer));
            if (this.belongs_to !== undefined)
                writer.writeMessage(4, this.belongs_to, () => this.belongs_to.serialize(writer));
            if (this.has_many !== undefined)
                writer.writeMessage(5, this.has_many, () => this.has_many.serialize(writer));
            if (this.many_to_many !== undefined)
                writer.writeMessage(6, this.many_to_many, () => this.many_to_many.serialize(writer));
            if (typeof this.reference_of === "string" && this.reference_of.length)
                writer.writeString(7, this.reference_of);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GormFieldOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GormFieldOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tag, () => message.tag = GormTag.deserialize(reader));
                        break;
                    case 2:
                        message.drop = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.has_one, () => message.has_one = HasOneOptions.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.belongs_to, () => message.belongs_to = BelongsToOptions.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.has_many, () => message.has_many = HasManyOptions.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.many_to_many, () => message.many_to_many = ManyToManyOptions.deserialize(reader));
                        break;
                    case 7:
                        message.reference_of = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GormFieldOptions {
            return GormFieldOptions.deserialize(bytes);
        }
    }
    export class GormTag extends pb_1.Message {
        constructor(data?: any[] | {
            column?: string;
            type?: string;
            size?: number;
            precision?: number;
            primary_key?: boolean;
            unique?: boolean;
            default?: string;
            not_null?: boolean;
            auto_increment?: boolean;
            index?: string;
            unique_index?: string;
            embedded?: boolean;
            embedded_prefix?: string;
            ignore?: boolean;
            foreignkey?: string;
            association_foreignkey?: string;
            many_to_many?: string;
            jointable_foreignkey?: string;
            association_jointable_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("column" in data && data.column != undefined) {
                    this.column = data.column;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("precision" in data && data.precision != undefined) {
                    this.precision = data.precision;
                }
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("unique" in data && data.unique != undefined) {
                    this.unique = data.unique;
                }
                if ("default" in data && data.default != undefined) {
                    this.default = data.default;
                }
                if ("not_null" in data && data.not_null != undefined) {
                    this.not_null = data.not_null;
                }
                if ("auto_increment" in data && data.auto_increment != undefined) {
                    this.auto_increment = data.auto_increment;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("unique_index" in data && data.unique_index != undefined) {
                    this.unique_index = data.unique_index;
                }
                if ("embedded" in data && data.embedded != undefined) {
                    this.embedded = data.embedded;
                }
                if ("embedded_prefix" in data && data.embedded_prefix != undefined) {
                    this.embedded_prefix = data.embedded_prefix;
                }
                if ("ignore" in data && data.ignore != undefined) {
                    this.ignore = data.ignore;
                }
                if ("foreignkey" in data && data.foreignkey != undefined) {
                    this.foreignkey = data.foreignkey;
                }
                if ("association_foreignkey" in data && data.association_foreignkey != undefined) {
                    this.association_foreignkey = data.association_foreignkey;
                }
                if ("many_to_many" in data && data.many_to_many != undefined) {
                    this.many_to_many = data.many_to_many;
                }
                if ("jointable_foreignkey" in data && data.jointable_foreignkey != undefined) {
                    this.jointable_foreignkey = data.jointable_foreignkey;
                }
                if ("association_jointable_foreignkey" in data && data.association_jointable_foreignkey != undefined) {
                    this.association_jointable_foreignkey = data.association_jointable_foreignkey;
                }
                if ("association_autoupdate" in data && data.association_autoupdate != undefined) {
                    this.association_autoupdate = data.association_autoupdate;
                }
                if ("association_autocreate" in data && data.association_autocreate != undefined) {
                    this.association_autocreate = data.association_autocreate;
                }
                if ("association_save_reference" in data && data.association_save_reference != undefined) {
                    this.association_save_reference = data.association_save_reference;
                }
                if ("preload" in data && data.preload != undefined) {
                    this.preload = data.preload;
                }
            }
        }
        get column() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set column(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get precision() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set precision(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get primary_key() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set primary_key(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get unique() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set unique(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get default() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set default(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get not_null() {
            return pb_1.Message.getField(this, 8) as boolean;
        }
        set not_null(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get auto_increment() {
            return pb_1.Message.getField(this, 9) as boolean;
        }
        set auto_increment(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get index() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get unique_index() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set unique_index(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get embedded() {
            return pb_1.Message.getField(this, 12) as boolean;
        }
        set embedded(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get embedded_prefix() {
            return pb_1.Message.getField(this, 13) as string;
        }
        set embedded_prefix(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get ignore() {
            return pb_1.Message.getField(this, 14) as boolean;
        }
        set ignore(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get foreignkey() {
            return pb_1.Message.getField(this, 15) as string;
        }
        set foreignkey(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get association_foreignkey() {
            return pb_1.Message.getField(this, 16) as string;
        }
        set association_foreignkey(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get many_to_many() {
            return pb_1.Message.getField(this, 17) as string;
        }
        set many_to_many(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get jointable_foreignkey() {
            return pb_1.Message.getField(this, 18) as string;
        }
        set jointable_foreignkey(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get association_jointable_foreignkey() {
            return pb_1.Message.getField(this, 19) as string;
        }
        set association_jointable_foreignkey(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get association_autoupdate() {
            return pb_1.Message.getField(this, 20) as boolean;
        }
        set association_autoupdate(value: boolean) {
            pb_1.Message.setField(this, 20, value);
        }
        get association_autocreate() {
            return pb_1.Message.getField(this, 21) as boolean;
        }
        set association_autocreate(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get association_save_reference() {
            return pb_1.Message.getField(this, 22) as boolean;
        }
        set association_save_reference(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get preload() {
            return pb_1.Message.getField(this, 23) as boolean;
        }
        set preload(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        static fromObject(data: {
            column?: string;
            type?: string;
            size?: number;
            precision?: number;
            primary_key?: boolean;
            unique?: boolean;
            default?: string;
            not_null?: boolean;
            auto_increment?: boolean;
            index?: string;
            unique_index?: string;
            embedded?: boolean;
            embedded_prefix?: string;
            ignore?: boolean;
            foreignkey?: string;
            association_foreignkey?: string;
            many_to_many?: string;
            jointable_foreignkey?: string;
            association_jointable_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            const message = new GormTag({});
            if (data.column != null) {
                message.column = data.column;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.precision != null) {
                message.precision = data.precision;
            }
            if (data.primary_key != null) {
                message.primary_key = data.primary_key;
            }
            if (data.unique != null) {
                message.unique = data.unique;
            }
            if (data.default != null) {
                message.default = data.default;
            }
            if (data.not_null != null) {
                message.not_null = data.not_null;
            }
            if (data.auto_increment != null) {
                message.auto_increment = data.auto_increment;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.unique_index != null) {
                message.unique_index = data.unique_index;
            }
            if (data.embedded != null) {
                message.embedded = data.embedded;
            }
            if (data.embedded_prefix != null) {
                message.embedded_prefix = data.embedded_prefix;
            }
            if (data.ignore != null) {
                message.ignore = data.ignore;
            }
            if (data.foreignkey != null) {
                message.foreignkey = data.foreignkey;
            }
            if (data.association_foreignkey != null) {
                message.association_foreignkey = data.association_foreignkey;
            }
            if (data.many_to_many != null) {
                message.many_to_many = data.many_to_many;
            }
            if (data.jointable_foreignkey != null) {
                message.jointable_foreignkey = data.jointable_foreignkey;
            }
            if (data.association_jointable_foreignkey != null) {
                message.association_jointable_foreignkey = data.association_jointable_foreignkey;
            }
            if (data.association_autoupdate != null) {
                message.association_autoupdate = data.association_autoupdate;
            }
            if (data.association_autocreate != null) {
                message.association_autocreate = data.association_autocreate;
            }
            if (data.association_save_reference != null) {
                message.association_save_reference = data.association_save_reference;
            }
            if (data.preload != null) {
                message.preload = data.preload;
            }
            return message;
        }
        toObject() {
            const data: {
                column?: string;
                type?: string;
                size?: number;
                precision?: number;
                primary_key?: boolean;
                unique?: boolean;
                default?: string;
                not_null?: boolean;
                auto_increment?: boolean;
                index?: string;
                unique_index?: string;
                embedded?: boolean;
                embedded_prefix?: string;
                ignore?: boolean;
                foreignkey?: string;
                association_foreignkey?: string;
                many_to_many?: string;
                jointable_foreignkey?: string;
                association_jointable_foreignkey?: string;
                association_autoupdate?: boolean;
                association_autocreate?: boolean;
                association_save_reference?: boolean;
                preload?: boolean;
            } = {};
            if (this.column != null) {
                data.column = this.column;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.precision != null) {
                data.precision = this.precision;
            }
            if (this.primary_key != null) {
                data.primary_key = this.primary_key;
            }
            if (this.unique != null) {
                data.unique = this.unique;
            }
            if (this.default != null) {
                data.default = this.default;
            }
            if (this.not_null != null) {
                data.not_null = this.not_null;
            }
            if (this.auto_increment != null) {
                data.auto_increment = this.auto_increment;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.unique_index != null) {
                data.unique_index = this.unique_index;
            }
            if (this.embedded != null) {
                data.embedded = this.embedded;
            }
            if (this.embedded_prefix != null) {
                data.embedded_prefix = this.embedded_prefix;
            }
            if (this.ignore != null) {
                data.ignore = this.ignore;
            }
            if (this.foreignkey != null) {
                data.foreignkey = this.foreignkey;
            }
            if (this.association_foreignkey != null) {
                data.association_foreignkey = this.association_foreignkey;
            }
            if (this.many_to_many != null) {
                data.many_to_many = this.many_to_many;
            }
            if (this.jointable_foreignkey != null) {
                data.jointable_foreignkey = this.jointable_foreignkey;
            }
            if (this.association_jointable_foreignkey != null) {
                data.association_jointable_foreignkey = this.association_jointable_foreignkey;
            }
            if (this.association_autoupdate != null) {
                data.association_autoupdate = this.association_autoupdate;
            }
            if (this.association_autocreate != null) {
                data.association_autocreate = this.association_autocreate;
            }
            if (this.association_save_reference != null) {
                data.association_save_reference = this.association_save_reference;
            }
            if (this.preload != null) {
                data.preload = this.preload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.column === "string" && this.column.length)
                writer.writeString(1, this.column);
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(2, this.type);
            if (this.size !== undefined)
                writer.writeInt32(3, this.size);
            if (this.precision !== undefined)
                writer.writeInt32(4, this.precision);
            if (this.primary_key !== undefined)
                writer.writeBool(5, this.primary_key);
            if (this.unique !== undefined)
                writer.writeBool(6, this.unique);
            if (typeof this.default === "string" && this.default.length)
                writer.writeString(7, this.default);
            if (this.not_null !== undefined)
                writer.writeBool(8, this.not_null);
            if (this.auto_increment !== undefined)
                writer.writeBool(9, this.auto_increment);
            if (typeof this.index === "string" && this.index.length)
                writer.writeString(10, this.index);
            if (typeof this.unique_index === "string" && this.unique_index.length)
                writer.writeString(11, this.unique_index);
            if (this.embedded !== undefined)
                writer.writeBool(12, this.embedded);
            if (typeof this.embedded_prefix === "string" && this.embedded_prefix.length)
                writer.writeString(13, this.embedded_prefix);
            if (this.ignore !== undefined)
                writer.writeBool(14, this.ignore);
            if (typeof this.foreignkey === "string" && this.foreignkey.length)
                writer.writeString(15, this.foreignkey);
            if (typeof this.association_foreignkey === "string" && this.association_foreignkey.length)
                writer.writeString(16, this.association_foreignkey);
            if (typeof this.many_to_many === "string" && this.many_to_many.length)
                writer.writeString(17, this.many_to_many);
            if (typeof this.jointable_foreignkey === "string" && this.jointable_foreignkey.length)
                writer.writeString(18, this.jointable_foreignkey);
            if (typeof this.association_jointable_foreignkey === "string" && this.association_jointable_foreignkey.length)
                writer.writeString(19, this.association_jointable_foreignkey);
            if (this.association_autoupdate !== undefined)
                writer.writeBool(20, this.association_autoupdate);
            if (this.association_autocreate !== undefined)
                writer.writeBool(21, this.association_autocreate);
            if (this.association_save_reference !== undefined)
                writer.writeBool(22, this.association_save_reference);
            if (this.preload !== undefined)
                writer.writeBool(23, this.preload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GormTag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GormTag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.column = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.size = reader.readInt32();
                        break;
                    case 4:
                        message.precision = reader.readInt32();
                        break;
                    case 5:
                        message.primary_key = reader.readBool();
                        break;
                    case 6:
                        message.unique = reader.readBool();
                        break;
                    case 7:
                        message.default = reader.readString();
                        break;
                    case 8:
                        message.not_null = reader.readBool();
                        break;
                    case 9:
                        message.auto_increment = reader.readBool();
                        break;
                    case 10:
                        message.index = reader.readString();
                        break;
                    case 11:
                        message.unique_index = reader.readString();
                        break;
                    case 12:
                        message.embedded = reader.readBool();
                        break;
                    case 13:
                        message.embedded_prefix = reader.readString();
                        break;
                    case 14:
                        message.ignore = reader.readBool();
                        break;
                    case 15:
                        message.foreignkey = reader.readString();
                        break;
                    case 16:
                        message.association_foreignkey = reader.readString();
                        break;
                    case 17:
                        message.many_to_many = reader.readString();
                        break;
                    case 18:
                        message.jointable_foreignkey = reader.readString();
                        break;
                    case 19:
                        message.association_jointable_foreignkey = reader.readString();
                        break;
                    case 20:
                        message.association_autoupdate = reader.readBool();
                        break;
                    case 21:
                        message.association_autocreate = reader.readBool();
                        break;
                    case 22:
                        message.association_save_reference = reader.readBool();
                        break;
                    case 23:
                        message.preload = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GormTag {
            return GormTag.deserialize(bytes);
        }
    }
    export class HasOneOptions extends pb_1.Message {
        constructor(data?: any[] | {
            foreignkey?: string;
            foreignkey_tag?: GormTag;
            association_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("foreignkey" in data && data.foreignkey != undefined) {
                    this.foreignkey = data.foreignkey;
                }
                if ("foreignkey_tag" in data && data.foreignkey_tag != undefined) {
                    this.foreignkey_tag = data.foreignkey_tag;
                }
                if ("association_foreignkey" in data && data.association_foreignkey != undefined) {
                    this.association_foreignkey = data.association_foreignkey;
                }
                if ("association_autoupdate" in data && data.association_autoupdate != undefined) {
                    this.association_autoupdate = data.association_autoupdate;
                }
                if ("association_autocreate" in data && data.association_autocreate != undefined) {
                    this.association_autocreate = data.association_autocreate;
                }
                if ("association_save_reference" in data && data.association_save_reference != undefined) {
                    this.association_save_reference = data.association_save_reference;
                }
                if ("preload" in data && data.preload != undefined) {
                    this.preload = data.preload;
                }
            }
        }
        get foreignkey() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set foreignkey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get foreignkey_tag() {
            return pb_1.Message.getWrapperField(this, GormTag, 2) as GormTag;
        }
        set foreignkey_tag(value: GormTag) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get association_foreignkey() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set association_foreignkey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get association_autoupdate() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set association_autoupdate(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get association_autocreate() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set association_autocreate(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get association_save_reference() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set association_save_reference(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get preload() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set preload(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            foreignkey?: string;
            foreignkey_tag?: ReturnType<typeof GormTag.prototype.toObject>;
            association_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            const message = new HasOneOptions({});
            if (data.foreignkey != null) {
                message.foreignkey = data.foreignkey;
            }
            if (data.foreignkey_tag != null) {
                message.foreignkey_tag = GormTag.fromObject(data.foreignkey_tag);
            }
            if (data.association_foreignkey != null) {
                message.association_foreignkey = data.association_foreignkey;
            }
            if (data.association_autoupdate != null) {
                message.association_autoupdate = data.association_autoupdate;
            }
            if (data.association_autocreate != null) {
                message.association_autocreate = data.association_autocreate;
            }
            if (data.association_save_reference != null) {
                message.association_save_reference = data.association_save_reference;
            }
            if (data.preload != null) {
                message.preload = data.preload;
            }
            return message;
        }
        toObject() {
            const data: {
                foreignkey?: string;
                foreignkey_tag?: ReturnType<typeof GormTag.prototype.toObject>;
                association_foreignkey?: string;
                association_autoupdate?: boolean;
                association_autocreate?: boolean;
                association_save_reference?: boolean;
                preload?: boolean;
            } = {};
            if (this.foreignkey != null) {
                data.foreignkey = this.foreignkey;
            }
            if (this.foreignkey_tag != null) {
                data.foreignkey_tag = this.foreignkey_tag.toObject();
            }
            if (this.association_foreignkey != null) {
                data.association_foreignkey = this.association_foreignkey;
            }
            if (this.association_autoupdate != null) {
                data.association_autoupdate = this.association_autoupdate;
            }
            if (this.association_autocreate != null) {
                data.association_autocreate = this.association_autocreate;
            }
            if (this.association_save_reference != null) {
                data.association_save_reference = this.association_save_reference;
            }
            if (this.preload != null) {
                data.preload = this.preload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.foreignkey === "string" && this.foreignkey.length)
                writer.writeString(1, this.foreignkey);
            if (this.foreignkey_tag !== undefined)
                writer.writeMessage(2, this.foreignkey_tag, () => this.foreignkey_tag.serialize(writer));
            if (typeof this.association_foreignkey === "string" && this.association_foreignkey.length)
                writer.writeString(3, this.association_foreignkey);
            if (this.association_autoupdate !== undefined)
                writer.writeBool(4, this.association_autoupdate);
            if (this.association_autocreate !== undefined)
                writer.writeBool(5, this.association_autocreate);
            if (this.association_save_reference !== undefined)
                writer.writeBool(6, this.association_save_reference);
            if (this.preload !== undefined)
                writer.writeBool(7, this.preload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HasOneOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HasOneOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.foreignkey = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.foreignkey_tag, () => message.foreignkey_tag = GormTag.deserialize(reader));
                        break;
                    case 3:
                        message.association_foreignkey = reader.readString();
                        break;
                    case 4:
                        message.association_autoupdate = reader.readBool();
                        break;
                    case 5:
                        message.association_autocreate = reader.readBool();
                        break;
                    case 6:
                        message.association_save_reference = reader.readBool();
                        break;
                    case 7:
                        message.preload = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HasOneOptions {
            return HasOneOptions.deserialize(bytes);
        }
    }
    export class BelongsToOptions extends pb_1.Message {
        constructor(data?: any[] | {
            foreignkey?: string;
            foreignkey_tag?: GormTag;
            association_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("foreignkey" in data && data.foreignkey != undefined) {
                    this.foreignkey = data.foreignkey;
                }
                if ("foreignkey_tag" in data && data.foreignkey_tag != undefined) {
                    this.foreignkey_tag = data.foreignkey_tag;
                }
                if ("association_foreignkey" in data && data.association_foreignkey != undefined) {
                    this.association_foreignkey = data.association_foreignkey;
                }
                if ("association_autoupdate" in data && data.association_autoupdate != undefined) {
                    this.association_autoupdate = data.association_autoupdate;
                }
                if ("association_autocreate" in data && data.association_autocreate != undefined) {
                    this.association_autocreate = data.association_autocreate;
                }
                if ("association_save_reference" in data && data.association_save_reference != undefined) {
                    this.association_save_reference = data.association_save_reference;
                }
                if ("preload" in data && data.preload != undefined) {
                    this.preload = data.preload;
                }
            }
        }
        get foreignkey() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set foreignkey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get foreignkey_tag() {
            return pb_1.Message.getWrapperField(this, GormTag, 2) as GormTag;
        }
        set foreignkey_tag(value: GormTag) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get association_foreignkey() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set association_foreignkey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get association_autoupdate() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set association_autoupdate(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get association_autocreate() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set association_autocreate(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get association_save_reference() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set association_save_reference(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get preload() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set preload(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            foreignkey?: string;
            foreignkey_tag?: ReturnType<typeof GormTag.prototype.toObject>;
            association_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            const message = new BelongsToOptions({});
            if (data.foreignkey != null) {
                message.foreignkey = data.foreignkey;
            }
            if (data.foreignkey_tag != null) {
                message.foreignkey_tag = GormTag.fromObject(data.foreignkey_tag);
            }
            if (data.association_foreignkey != null) {
                message.association_foreignkey = data.association_foreignkey;
            }
            if (data.association_autoupdate != null) {
                message.association_autoupdate = data.association_autoupdate;
            }
            if (data.association_autocreate != null) {
                message.association_autocreate = data.association_autocreate;
            }
            if (data.association_save_reference != null) {
                message.association_save_reference = data.association_save_reference;
            }
            if (data.preload != null) {
                message.preload = data.preload;
            }
            return message;
        }
        toObject() {
            const data: {
                foreignkey?: string;
                foreignkey_tag?: ReturnType<typeof GormTag.prototype.toObject>;
                association_foreignkey?: string;
                association_autoupdate?: boolean;
                association_autocreate?: boolean;
                association_save_reference?: boolean;
                preload?: boolean;
            } = {};
            if (this.foreignkey != null) {
                data.foreignkey = this.foreignkey;
            }
            if (this.foreignkey_tag != null) {
                data.foreignkey_tag = this.foreignkey_tag.toObject();
            }
            if (this.association_foreignkey != null) {
                data.association_foreignkey = this.association_foreignkey;
            }
            if (this.association_autoupdate != null) {
                data.association_autoupdate = this.association_autoupdate;
            }
            if (this.association_autocreate != null) {
                data.association_autocreate = this.association_autocreate;
            }
            if (this.association_save_reference != null) {
                data.association_save_reference = this.association_save_reference;
            }
            if (this.preload != null) {
                data.preload = this.preload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.foreignkey === "string" && this.foreignkey.length)
                writer.writeString(1, this.foreignkey);
            if (this.foreignkey_tag !== undefined)
                writer.writeMessage(2, this.foreignkey_tag, () => this.foreignkey_tag.serialize(writer));
            if (typeof this.association_foreignkey === "string" && this.association_foreignkey.length)
                writer.writeString(3, this.association_foreignkey);
            if (this.association_autoupdate !== undefined)
                writer.writeBool(4, this.association_autoupdate);
            if (this.association_autocreate !== undefined)
                writer.writeBool(5, this.association_autocreate);
            if (this.association_save_reference !== undefined)
                writer.writeBool(6, this.association_save_reference);
            if (this.preload !== undefined)
                writer.writeBool(7, this.preload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BelongsToOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BelongsToOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.foreignkey = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.foreignkey_tag, () => message.foreignkey_tag = GormTag.deserialize(reader));
                        break;
                    case 3:
                        message.association_foreignkey = reader.readString();
                        break;
                    case 4:
                        message.association_autoupdate = reader.readBool();
                        break;
                    case 5:
                        message.association_autocreate = reader.readBool();
                        break;
                    case 6:
                        message.association_save_reference = reader.readBool();
                        break;
                    case 7:
                        message.preload = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BelongsToOptions {
            return BelongsToOptions.deserialize(bytes);
        }
    }
    export class HasManyOptions extends pb_1.Message {
        constructor(data?: any[] | {
            foreignkey?: string;
            foreignkey_tag?: GormTag;
            association_foreignkey?: string;
            position_field?: string;
            position_field_tag?: GormTag;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("foreignkey" in data && data.foreignkey != undefined) {
                    this.foreignkey = data.foreignkey;
                }
                if ("foreignkey_tag" in data && data.foreignkey_tag != undefined) {
                    this.foreignkey_tag = data.foreignkey_tag;
                }
                if ("association_foreignkey" in data && data.association_foreignkey != undefined) {
                    this.association_foreignkey = data.association_foreignkey;
                }
                if ("position_field" in data && data.position_field != undefined) {
                    this.position_field = data.position_field;
                }
                if ("position_field_tag" in data && data.position_field_tag != undefined) {
                    this.position_field_tag = data.position_field_tag;
                }
                if ("association_autoupdate" in data && data.association_autoupdate != undefined) {
                    this.association_autoupdate = data.association_autoupdate;
                }
                if ("association_autocreate" in data && data.association_autocreate != undefined) {
                    this.association_autocreate = data.association_autocreate;
                }
                if ("association_save_reference" in data && data.association_save_reference != undefined) {
                    this.association_save_reference = data.association_save_reference;
                }
                if ("preload" in data && data.preload != undefined) {
                    this.preload = data.preload;
                }
            }
        }
        get foreignkey() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set foreignkey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get foreignkey_tag() {
            return pb_1.Message.getWrapperField(this, GormTag, 2) as GormTag;
        }
        set foreignkey_tag(value: GormTag) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get association_foreignkey() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set association_foreignkey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get position_field() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set position_field(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get position_field_tag() {
            return pb_1.Message.getWrapperField(this, GormTag, 5) as GormTag;
        }
        set position_field_tag(value: GormTag) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get association_autoupdate() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set association_autoupdate(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get association_autocreate() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set association_autocreate(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get association_save_reference() {
            return pb_1.Message.getField(this, 8) as boolean;
        }
        set association_save_reference(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get preload() {
            return pb_1.Message.getField(this, 9) as boolean;
        }
        set preload(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            foreignkey?: string;
            foreignkey_tag?: ReturnType<typeof GormTag.prototype.toObject>;
            association_foreignkey?: string;
            position_field?: string;
            position_field_tag?: ReturnType<typeof GormTag.prototype.toObject>;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            const message = new HasManyOptions({});
            if (data.foreignkey != null) {
                message.foreignkey = data.foreignkey;
            }
            if (data.foreignkey_tag != null) {
                message.foreignkey_tag = GormTag.fromObject(data.foreignkey_tag);
            }
            if (data.association_foreignkey != null) {
                message.association_foreignkey = data.association_foreignkey;
            }
            if (data.position_field != null) {
                message.position_field = data.position_field;
            }
            if (data.position_field_tag != null) {
                message.position_field_tag = GormTag.fromObject(data.position_field_tag);
            }
            if (data.association_autoupdate != null) {
                message.association_autoupdate = data.association_autoupdate;
            }
            if (data.association_autocreate != null) {
                message.association_autocreate = data.association_autocreate;
            }
            if (data.association_save_reference != null) {
                message.association_save_reference = data.association_save_reference;
            }
            if (data.preload != null) {
                message.preload = data.preload;
            }
            return message;
        }
        toObject() {
            const data: {
                foreignkey?: string;
                foreignkey_tag?: ReturnType<typeof GormTag.prototype.toObject>;
                association_foreignkey?: string;
                position_field?: string;
                position_field_tag?: ReturnType<typeof GormTag.prototype.toObject>;
                association_autoupdate?: boolean;
                association_autocreate?: boolean;
                association_save_reference?: boolean;
                preload?: boolean;
            } = {};
            if (this.foreignkey != null) {
                data.foreignkey = this.foreignkey;
            }
            if (this.foreignkey_tag != null) {
                data.foreignkey_tag = this.foreignkey_tag.toObject();
            }
            if (this.association_foreignkey != null) {
                data.association_foreignkey = this.association_foreignkey;
            }
            if (this.position_field != null) {
                data.position_field = this.position_field;
            }
            if (this.position_field_tag != null) {
                data.position_field_tag = this.position_field_tag.toObject();
            }
            if (this.association_autoupdate != null) {
                data.association_autoupdate = this.association_autoupdate;
            }
            if (this.association_autocreate != null) {
                data.association_autocreate = this.association_autocreate;
            }
            if (this.association_save_reference != null) {
                data.association_save_reference = this.association_save_reference;
            }
            if (this.preload != null) {
                data.preload = this.preload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.foreignkey === "string" && this.foreignkey.length)
                writer.writeString(1, this.foreignkey);
            if (this.foreignkey_tag !== undefined)
                writer.writeMessage(2, this.foreignkey_tag, () => this.foreignkey_tag.serialize(writer));
            if (typeof this.association_foreignkey === "string" && this.association_foreignkey.length)
                writer.writeString(3, this.association_foreignkey);
            if (typeof this.position_field === "string" && this.position_field.length)
                writer.writeString(4, this.position_field);
            if (this.position_field_tag !== undefined)
                writer.writeMessage(5, this.position_field_tag, () => this.position_field_tag.serialize(writer));
            if (this.association_autoupdate !== undefined)
                writer.writeBool(6, this.association_autoupdate);
            if (this.association_autocreate !== undefined)
                writer.writeBool(7, this.association_autocreate);
            if (this.association_save_reference !== undefined)
                writer.writeBool(8, this.association_save_reference);
            if (this.preload !== undefined)
                writer.writeBool(9, this.preload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HasManyOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HasManyOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.foreignkey = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.foreignkey_tag, () => message.foreignkey_tag = GormTag.deserialize(reader));
                        break;
                    case 3:
                        message.association_foreignkey = reader.readString();
                        break;
                    case 4:
                        message.position_field = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.position_field_tag, () => message.position_field_tag = GormTag.deserialize(reader));
                        break;
                    case 6:
                        message.association_autoupdate = reader.readBool();
                        break;
                    case 7:
                        message.association_autocreate = reader.readBool();
                        break;
                    case 8:
                        message.association_save_reference = reader.readBool();
                        break;
                    case 9:
                        message.preload = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HasManyOptions {
            return HasManyOptions.deserialize(bytes);
        }
    }
    export class ManyToManyOptions extends pb_1.Message {
        constructor(data?: any[] | {
            jointable?: string;
            foreignkey?: string;
            jointable_foreignkey?: string;
            association_foreignkey?: string;
            association_jointable_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jointable" in data && data.jointable != undefined) {
                    this.jointable = data.jointable;
                }
                if ("foreignkey" in data && data.foreignkey != undefined) {
                    this.foreignkey = data.foreignkey;
                }
                if ("jointable_foreignkey" in data && data.jointable_foreignkey != undefined) {
                    this.jointable_foreignkey = data.jointable_foreignkey;
                }
                if ("association_foreignkey" in data && data.association_foreignkey != undefined) {
                    this.association_foreignkey = data.association_foreignkey;
                }
                if ("association_jointable_foreignkey" in data && data.association_jointable_foreignkey != undefined) {
                    this.association_jointable_foreignkey = data.association_jointable_foreignkey;
                }
                if ("association_autoupdate" in data && data.association_autoupdate != undefined) {
                    this.association_autoupdate = data.association_autoupdate;
                }
                if ("association_autocreate" in data && data.association_autocreate != undefined) {
                    this.association_autocreate = data.association_autocreate;
                }
                if ("association_save_reference" in data && data.association_save_reference != undefined) {
                    this.association_save_reference = data.association_save_reference;
                }
                if ("preload" in data && data.preload != undefined) {
                    this.preload = data.preload;
                }
            }
        }
        get jointable() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set jointable(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get foreignkey() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set foreignkey(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get jointable_foreignkey() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set jointable_foreignkey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get association_foreignkey() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set association_foreignkey(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get association_jointable_foreignkey() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set association_jointable_foreignkey(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get association_autoupdate() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set association_autoupdate(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get association_autocreate() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set association_autocreate(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get association_save_reference() {
            return pb_1.Message.getField(this, 8) as boolean;
        }
        set association_save_reference(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get preload() {
            return pb_1.Message.getField(this, 9) as boolean;
        }
        set preload(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            jointable?: string;
            foreignkey?: string;
            jointable_foreignkey?: string;
            association_foreignkey?: string;
            association_jointable_foreignkey?: string;
            association_autoupdate?: boolean;
            association_autocreate?: boolean;
            association_save_reference?: boolean;
            preload?: boolean;
        }) {
            const message = new ManyToManyOptions({});
            if (data.jointable != null) {
                message.jointable = data.jointable;
            }
            if (data.foreignkey != null) {
                message.foreignkey = data.foreignkey;
            }
            if (data.jointable_foreignkey != null) {
                message.jointable_foreignkey = data.jointable_foreignkey;
            }
            if (data.association_foreignkey != null) {
                message.association_foreignkey = data.association_foreignkey;
            }
            if (data.association_jointable_foreignkey != null) {
                message.association_jointable_foreignkey = data.association_jointable_foreignkey;
            }
            if (data.association_autoupdate != null) {
                message.association_autoupdate = data.association_autoupdate;
            }
            if (data.association_autocreate != null) {
                message.association_autocreate = data.association_autocreate;
            }
            if (data.association_save_reference != null) {
                message.association_save_reference = data.association_save_reference;
            }
            if (data.preload != null) {
                message.preload = data.preload;
            }
            return message;
        }
        toObject() {
            const data: {
                jointable?: string;
                foreignkey?: string;
                jointable_foreignkey?: string;
                association_foreignkey?: string;
                association_jointable_foreignkey?: string;
                association_autoupdate?: boolean;
                association_autocreate?: boolean;
                association_save_reference?: boolean;
                preload?: boolean;
            } = {};
            if (this.jointable != null) {
                data.jointable = this.jointable;
            }
            if (this.foreignkey != null) {
                data.foreignkey = this.foreignkey;
            }
            if (this.jointable_foreignkey != null) {
                data.jointable_foreignkey = this.jointable_foreignkey;
            }
            if (this.association_foreignkey != null) {
                data.association_foreignkey = this.association_foreignkey;
            }
            if (this.association_jointable_foreignkey != null) {
                data.association_jointable_foreignkey = this.association_jointable_foreignkey;
            }
            if (this.association_autoupdate != null) {
                data.association_autoupdate = this.association_autoupdate;
            }
            if (this.association_autocreate != null) {
                data.association_autocreate = this.association_autocreate;
            }
            if (this.association_save_reference != null) {
                data.association_save_reference = this.association_save_reference;
            }
            if (this.preload != null) {
                data.preload = this.preload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.jointable === "string" && this.jointable.length)
                writer.writeString(1, this.jointable);
            if (typeof this.foreignkey === "string" && this.foreignkey.length)
                writer.writeString(2, this.foreignkey);
            if (typeof this.jointable_foreignkey === "string" && this.jointable_foreignkey.length)
                writer.writeString(3, this.jointable_foreignkey);
            if (typeof this.association_foreignkey === "string" && this.association_foreignkey.length)
                writer.writeString(4, this.association_foreignkey);
            if (typeof this.association_jointable_foreignkey === "string" && this.association_jointable_foreignkey.length)
                writer.writeString(5, this.association_jointable_foreignkey);
            if (this.association_autoupdate !== undefined)
                writer.writeBool(6, this.association_autoupdate);
            if (this.association_autocreate !== undefined)
                writer.writeBool(7, this.association_autocreate);
            if (this.association_save_reference !== undefined)
                writer.writeBool(8, this.association_save_reference);
            if (this.preload !== undefined)
                writer.writeBool(9, this.preload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManyToManyOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManyToManyOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jointable = reader.readString();
                        break;
                    case 2:
                        message.foreignkey = reader.readString();
                        break;
                    case 3:
                        message.jointable_foreignkey = reader.readString();
                        break;
                    case 4:
                        message.association_foreignkey = reader.readString();
                        break;
                    case 5:
                        message.association_jointable_foreignkey = reader.readString();
                        break;
                    case 6:
                        message.association_autoupdate = reader.readBool();
                        break;
                    case 7:
                        message.association_autocreate = reader.readBool();
                        break;
                    case 8:
                        message.association_save_reference = reader.readBool();
                        break;
                    case 9:
                        message.preload = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManyToManyOptions {
            return ManyToManyOptions.deserialize(bytes);
        }
    }
    export class AutoServerOptions extends pb_1.Message {
        constructor(data?: any[] | {
            autogen?: boolean;
            txn_middleware?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("autogen" in data && data.autogen != undefined) {
                    this.autogen = data.autogen;
                }
                if ("txn_middleware" in data && data.txn_middleware != undefined) {
                    this.txn_middleware = data.txn_middleware;
                }
            }
        }
        get autogen() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set autogen(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get txn_middleware() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set txn_middleware(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            autogen?: boolean;
            txn_middleware?: boolean;
        }) {
            const message = new AutoServerOptions({});
            if (data.autogen != null) {
                message.autogen = data.autogen;
            }
            if (data.txn_middleware != null) {
                message.txn_middleware = data.txn_middleware;
            }
            return message;
        }
        toObject() {
            const data: {
                autogen?: boolean;
                txn_middleware?: boolean;
            } = {};
            if (this.autogen != null) {
                data.autogen = this.autogen;
            }
            if (this.txn_middleware != null) {
                data.txn_middleware = this.txn_middleware;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.autogen !== undefined)
                writer.writeBool(1, this.autogen);
            if (this.txn_middleware !== undefined)
                writer.writeBool(2, this.txn_middleware);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoServerOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoServerOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.autogen = reader.readBool();
                        break;
                    case 2:
                        message.txn_middleware = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoServerOptions {
            return AutoServerOptions.deserialize(bytes);
        }
    }
    export class MethodOptions extends pb_1.Message {
        constructor(data?: any[] | {
            object_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("object_type" in data && data.object_type != undefined) {
                    this.object_type = data.object_type;
                }
            }
        }
        get object_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set object_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            object_type?: string;
        }) {
            const message = new MethodOptions({});
            if (data.object_type != null) {
                message.object_type = data.object_type;
            }
            return message;
        }
        toObject() {
            const data: {
                object_type?: string;
            } = {};
            if (this.object_type != null) {
                data.object_type = this.object_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.object_type === "string" && this.object_type.length)
                writer.writeString(1, this.object_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MethodOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MethodOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.object_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MethodOptions {
            return MethodOptions.deserialize(bytes);
        }
    }
}
