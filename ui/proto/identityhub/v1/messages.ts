/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/identityhub/v1/messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace proto.identityhub.v1 {
    export class Message extends pb_1.Message {
        constructor(data?: any[] | {
            data?: string;
            descriptor?: MessageDescriptor;
            attestation?: Attestation;
            authorization?: Authorization;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("descriptor" in data && data.descriptor != undefined) {
                    this.descriptor = data.descriptor;
                }
                if ("attestation" in data && data.attestation != undefined) {
                    this.attestation = data.attestation;
                }
                if ("authorization" in data && data.authorization != undefined) {
                    this.authorization = data.authorization;
                }
            }
        }
        get data() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get descriptor() {
            return pb_1.Message.getWrapperField(this, MessageDescriptor, 2) as MessageDescriptor;
        }
        set descriptor(value: MessageDescriptor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get attestation() {
            return pb_1.Message.getWrapperField(this, Attestation, 3) as Attestation;
        }
        set attestation(value: Attestation) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get authorization() {
            return pb_1.Message.getWrapperField(this, Authorization, 4) as Authorization;
        }
        set authorization(value: Authorization) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            data?: string;
            descriptor?: ReturnType<typeof MessageDescriptor.prototype.toObject>;
            attestation?: ReturnType<typeof Attestation.prototype.toObject>;
            authorization?: ReturnType<typeof Authorization.prototype.toObject>;
        }) {
            const message = new Message({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.descriptor != null) {
                message.descriptor = MessageDescriptor.fromObject(data.descriptor);
            }
            if (data.attestation != null) {
                message.attestation = Attestation.fromObject(data.attestation);
            }
            if (data.authorization != null) {
                message.authorization = Authorization.fromObject(data.authorization);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: string;
                descriptor?: ReturnType<typeof MessageDescriptor.prototype.toObject>;
                attestation?: ReturnType<typeof Attestation.prototype.toObject>;
                authorization?: ReturnType<typeof Authorization.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.descriptor != null) {
                data.descriptor = this.descriptor.toObject();
            }
            if (this.attestation != null) {
                data.attestation = this.attestation.toObject();
            }
            if (this.authorization != null) {
                data.authorization = this.authorization.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.data === "string" && this.data.length)
                writer.writeString(1, this.data);
            if (this.descriptor !== undefined)
                writer.writeMessage(2, this.descriptor, () => this.descriptor.serialize(writer));
            if (this.attestation !== undefined)
                writer.writeMessage(3, this.attestation, () => this.attestation.serialize(writer));
            if (this.authorization !== undefined)
                writer.writeMessage(4, this.authorization, () => this.authorization.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.descriptor, () => message.descriptor = MessageDescriptor.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.attestation, () => message.attestation = Attestation.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.authorization, () => message.authorization = Authorization.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class MessageDescriptor extends pb_1.Message {
        constructor(data?: any[] | {
            method?: string;
            objectId?: string;
            schema?: string;
            dataFormat?: string;
            dateCreated?: string;
            datePublished?: string;
            dateSort?: string;
            root?: string;
            parent?: string;
            cid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("objectId" in data && data.objectId != undefined) {
                    this.objectId = data.objectId;
                }
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
                if ("dataFormat" in data && data.dataFormat != undefined) {
                    this.dataFormat = data.dataFormat;
                }
                if ("dateCreated" in data && data.dateCreated != undefined) {
                    this.dateCreated = data.dateCreated;
                }
                if ("datePublished" in data && data.datePublished != undefined) {
                    this.datePublished = data.datePublished;
                }
                if ("dateSort" in data && data.dateSort != undefined) {
                    this.dateSort = data.dateSort;
                }
                if ("root" in data && data.root != undefined) {
                    this.root = data.root;
                }
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("cid" in data && data.cid != undefined) {
                    this.cid = data.cid;
                }
            }
        }
        get method() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get objectId() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set objectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get schema() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set schema(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dataFormat() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set dataFormat(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get dateCreated() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set dateCreated(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get datePublished() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set datePublished(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get dateSort() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set dateSort(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get root() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set root(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get parent() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get cid() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set cid(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            method?: string;
            objectId?: string;
            schema?: string;
            dataFormat?: string;
            dateCreated?: string;
            datePublished?: string;
            dateSort?: string;
            root?: string;
            parent?: string;
            cid?: string;
        }) {
            const message = new MessageDescriptor({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.objectId != null) {
                message.objectId = data.objectId;
            }
            if (data.schema != null) {
                message.schema = data.schema;
            }
            if (data.dataFormat != null) {
                message.dataFormat = data.dataFormat;
            }
            if (data.dateCreated != null) {
                message.dateCreated = data.dateCreated;
            }
            if (data.datePublished != null) {
                message.datePublished = data.datePublished;
            }
            if (data.dateSort != null) {
                message.dateSort = data.dateSort;
            }
            if (data.root != null) {
                message.root = data.root;
            }
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.cid != null) {
                message.cid = data.cid;
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                objectId?: string;
                schema?: string;
                dataFormat?: string;
                dateCreated?: string;
                datePublished?: string;
                dateSort?: string;
                root?: string;
                parent?: string;
                cid?: string;
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.objectId != null) {
                data.objectId = this.objectId;
            }
            if (this.schema != null) {
                data.schema = this.schema;
            }
            if (this.dataFormat != null) {
                data.dataFormat = this.dataFormat;
            }
            if (this.dateCreated != null) {
                data.dateCreated = this.dateCreated;
            }
            if (this.datePublished != null) {
                data.datePublished = this.datePublished;
            }
            if (this.dateSort != null) {
                data.dateSort = this.dateSort;
            }
            if (this.root != null) {
                data.root = this.root;
            }
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.cid != null) {
                data.cid = this.cid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.method === "string" && this.method.length)
                writer.writeString(1, this.method);
            if (typeof this.objectId === "string" && this.objectId.length)
                writer.writeString(2, this.objectId);
            if (typeof this.schema === "string" && this.schema.length)
                writer.writeString(3, this.schema);
            if (typeof this.dataFormat === "string" && this.dataFormat.length)
                writer.writeString(4, this.dataFormat);
            if (typeof this.dateCreated === "string" && this.dateCreated.length)
                writer.writeString(5, this.dateCreated);
            if (typeof this.datePublished === "string" && this.datePublished.length)
                writer.writeString(6, this.datePublished);
            if (typeof this.dateSort === "string" && this.dateSort.length)
                writer.writeString(7, this.dateSort);
            if (typeof this.root === "string" && this.root.length)
                writer.writeString(8, this.root);
            if (typeof this.parent === "string" && this.parent.length)
                writer.writeString(9, this.parent);
            if (typeof this.cid === "string" && this.cid.length)
                writer.writeString(10, this.cid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        message.objectId = reader.readString();
                        break;
                    case 3:
                        message.schema = reader.readString();
                        break;
                    case 4:
                        message.dataFormat = reader.readString();
                        break;
                    case 5:
                        message.dateCreated = reader.readString();
                        break;
                    case 6:
                        message.datePublished = reader.readString();
                        break;
                    case 7:
                        message.dateSort = reader.readString();
                        break;
                    case 8:
                        message.root = reader.readString();
                        break;
                    case 9:
                        message.parent = reader.readString();
                        break;
                    case 10:
                        message.cid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageDescriptor {
            return MessageDescriptor.deserialize(bytes);
        }
    }
    export class Attestation extends pb_1.Message {
        constructor(data?: any[] | {
            protected?: AttestationProtected;
            payload?: string;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protected" in data && data.protected != undefined) {
                    this.protected = data.protected;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get protected() {
            return pb_1.Message.getWrapperField(this, AttestationProtected, 1) as AttestationProtected;
        }
        set protected(value: AttestationProtected) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get payload() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get signature() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            protected?: ReturnType<typeof AttestationProtected.prototype.toObject>;
            payload?: string;
            signature?: string;
        }) {
            const message = new Attestation({});
            if (data.protected != null) {
                message.protected = AttestationProtected.fromObject(data.protected);
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                protected?: ReturnType<typeof AttestationProtected.prototype.toObject>;
                payload?: string;
                signature?: string;
            } = {};
            if (this.protected != null) {
                data.protected = this.protected.toObject();
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protected !== undefined)
                writer.writeMessage(1, this.protected, () => this.protected.serialize(writer));
            if (typeof this.payload === "string" && this.payload.length)
                writer.writeString(2, this.payload);
            if (typeof this.signature === "string" && this.signature.length)
                writer.writeString(3, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attestation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attestation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.protected, () => message.protected = AttestationProtected.deserialize(reader));
                        break;
                    case 2:
                        message.payload = reader.readString();
                        break;
                    case 3:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Attestation {
            return Attestation.deserialize(bytes);
        }
    }
    export class AttestationProtected extends pb_1.Message {
        constructor(data?: any[] | {
            alg?: string;
            kid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alg" in data && data.alg != undefined) {
                    this.alg = data.alg;
                }
                if ("kid" in data && data.kid != undefined) {
                    this.kid = data.kid;
                }
            }
        }
        get alg() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set alg(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get kid() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set kid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            alg?: string;
            kid?: string;
        }) {
            const message = new AttestationProtected({});
            if (data.alg != null) {
                message.alg = data.alg;
            }
            if (data.kid != null) {
                message.kid = data.kid;
            }
            return message;
        }
        toObject() {
            const data: {
                alg?: string;
                kid?: string;
            } = {};
            if (this.alg != null) {
                data.alg = this.alg;
            }
            if (this.kid != null) {
                data.kid = this.kid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.alg === "string" && this.alg.length)
                writer.writeString(1, this.alg);
            if (typeof this.kid === "string" && this.kid.length)
                writer.writeString(2, this.kid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttestationProtected {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttestationProtected();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.alg = reader.readString();
                        break;
                    case 2:
                        message.kid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttestationProtected {
            return AttestationProtected.deserialize(bytes);
        }
    }
    export class Authorization extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new Authorization({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Authorization {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Authorization();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Authorization {
            return Authorization.deserialize(bytes);
        }
    }
}
