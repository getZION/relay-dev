/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/identityhub/v1/responses.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace proto.identityhub.v1 {
    export class Response extends pb_1.Message {
        constructor(data?: any[] | {
            requestId?: string;
            status?: Status;
            replies?: Reply[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("replies" in data && data.replies != undefined) {
                    this.replies = data.replies;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getWrapperField(this, Status, 2) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get replies() {
            return pb_1.Message.getRepeatedWrapperField(this, Reply, 3) as Reply[];
        }
        set replies(value: Reply[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            requestId?: string;
            status?: ReturnType<typeof Status.prototype.toObject>;
            replies?: ReturnType<typeof Reply.prototype.toObject>[];
        }) {
            const message = new Response({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.status != null) {
                message.status = Status.fromObject(data.status);
            }
            if (data.replies != null) {
                message.replies = data.replies.map(item => Reply.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requestId?: string;
                status?: ReturnType<typeof Status.prototype.toObject>;
                replies?: ReturnType<typeof Reply.prototype.toObject>[];
            } = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.replies != null) {
                data.replies = this.replies.map((item: Reply) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.requestId === "string" && this.requestId.length)
                writer.writeString(1, this.requestId);
            if (this.status !== undefined)
                writer.writeMessage(2, this.status, () => this.status.serialize(writer));
            if (this.replies !== undefined)
                writer.writeRepeatedMessage(3, this.replies, (item: Reply) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.status, () => message.status = Status.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.replies, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Reply.deserialize(reader), Reply));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class Status extends pb_1.Message {
        constructor(data?: any[] | {
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            message?: string;
        }) {
            const message = new Status({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code !== undefined)
                writer.writeInt64(1, this.code);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Status {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Status();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt64();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Status {
            return Status.deserialize(bytes);
        }
    }
    export class Reply extends pb_1.Message {
        constructor(data?: any[] | {
            messageId?: string;
            status?: Status;
            entries?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("entries" in data && data.entries != undefined) {
                    this.entries = data.entries;
                }
            }
        }
        get messageId() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getWrapperField(this, Status, 2) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get entries() {
            return pb_1.Message.getField(this, 3) as string[];
        }
        set entries(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            messageId?: string;
            status?: ReturnType<typeof Status.prototype.toObject>;
            entries?: string[];
        }) {
            const message = new Reply({});
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.status != null) {
                message.status = Status.fromObject(data.status);
            }
            if (data.entries != null) {
                message.entries = data.entries;
            }
            return message;
        }
        toObject() {
            const data: {
                messageId?: string;
                status?: ReturnType<typeof Status.prototype.toObject>;
                entries?: string[];
            } = {};
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.entries != null) {
                data.entries = this.entries;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.messageId === "string" && this.messageId.length)
                writer.writeString(1, this.messageId);
            if (this.status !== undefined)
                writer.writeMessage(2, this.status, () => this.status.serialize(writer));
            if (this.entries !== undefined)
                writer.writeRepeatedString(3, this.entries);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.messageId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.status, () => message.status = Status.deserialize(reader));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reply {
            return Reply.deserialize(bytes);
        }
    }
}
