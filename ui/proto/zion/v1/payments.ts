/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/zion/v1/payments.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-gorm/options/gorm";
import * as pb_1 from "google-protobuf";
export namespace proto.zion.v1 {
    export class Payment extends pb_1.Message {
        constructor(data?: any[] | {
            id?: number;
            zid?: string;
            sender_did?: string;
            recipient_did?: string;
            recipient_node_pubkey?: string;
            recipient_relay_url?: string;
            status?: string;
            amount?: number;
            type?: number;
            memo?: string;
            message_zid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("zid" in data && data.zid != undefined) {
                    this.zid = data.zid;
                }
                if ("sender_did" in data && data.sender_did != undefined) {
                    this.sender_did = data.sender_did;
                }
                if ("recipient_did" in data && data.recipient_did != undefined) {
                    this.recipient_did = data.recipient_did;
                }
                if ("recipient_node_pubkey" in data && data.recipient_node_pubkey != undefined) {
                    this.recipient_node_pubkey = data.recipient_node_pubkey;
                }
                if ("recipient_relay_url" in data && data.recipient_relay_url != undefined) {
                    this.recipient_relay_url = data.recipient_relay_url;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
                if ("message_zid" in data && data.message_zid != undefined) {
                    this.message_zid = data.message_zid;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get zid() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set zid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender_did() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set sender_did(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get recipient_did() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set recipient_did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get recipient_node_pubkey() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set recipient_node_pubkey(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get recipient_relay_url() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set recipient_relay_url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get amount() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get type() {
            return pb_1.Message.getField(this, 9) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get memo() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set memo(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get message_zid() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set message_zid(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: number;
            zid?: string;
            sender_did?: string;
            recipient_did?: string;
            recipient_node_pubkey?: string;
            recipient_relay_url?: string;
            status?: string;
            amount?: number;
            type?: number;
            memo?: string;
            message_zid?: string;
        }) {
            const message = new Payment({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.zid != null) {
                message.zid = data.zid;
            }
            if (data.sender_did != null) {
                message.sender_did = data.sender_did;
            }
            if (data.recipient_did != null) {
                message.recipient_did = data.recipient_did;
            }
            if (data.recipient_node_pubkey != null) {
                message.recipient_node_pubkey = data.recipient_node_pubkey;
            }
            if (data.recipient_relay_url != null) {
                message.recipient_relay_url = data.recipient_relay_url;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            if (data.message_zid != null) {
                message.message_zid = data.message_zid;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                zid?: string;
                sender_did?: string;
                recipient_did?: string;
                recipient_node_pubkey?: string;
                recipient_relay_url?: string;
                status?: string;
                amount?: number;
                type?: number;
                memo?: string;
                message_zid?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.zid != null) {
                data.zid = this.zid;
            }
            if (this.sender_did != null) {
                data.sender_did = this.sender_did;
            }
            if (this.recipient_did != null) {
                data.recipient_did = this.recipient_did;
            }
            if (this.recipient_node_pubkey != null) {
                data.recipient_node_pubkey = this.recipient_node_pubkey;
            }
            if (this.recipient_relay_url != null) {
                data.recipient_relay_url = this.recipient_relay_url;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            if (this.message_zid != null) {
                data.message_zid = this.message_zid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeInt64(1, this.id);
            if (typeof this.zid === "string" && this.zid.length)
                writer.writeString(2, this.zid);
            if (typeof this.sender_did === "string" && this.sender_did.length)
                writer.writeString(3, this.sender_did);
            if (typeof this.recipient_did === "string" && this.recipient_did.length)
                writer.writeString(4, this.recipient_did);
            if (typeof this.recipient_node_pubkey === "string" && this.recipient_node_pubkey.length)
                writer.writeString(5, this.recipient_node_pubkey);
            if (typeof this.recipient_relay_url === "string" && this.recipient_relay_url.length)
                writer.writeString(6, this.recipient_relay_url);
            if (typeof this.status === "string" && this.status.length)
                writer.writeString(7, this.status);
            if (this.amount !== undefined)
                writer.writeInt64(8, this.amount);
            if (this.type !== undefined)
                writer.writeInt64(9, this.type);
            if (typeof this.memo === "string" && this.memo.length)
                writer.writeString(10, this.memo);
            if (typeof this.message_zid === "string" && this.message_zid.length)
                writer.writeString(11, this.message_zid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Payment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Payment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.zid = reader.readString();
                        break;
                    case 3:
                        message.sender_did = reader.readString();
                        break;
                    case 4:
                        message.recipient_did = reader.readString();
                        break;
                    case 5:
                        message.recipient_node_pubkey = reader.readString();
                        break;
                    case 6:
                        message.recipient_relay_url = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readString();
                        break;
                    case 8:
                        message.amount = reader.readInt64();
                        break;
                    case 9:
                        message.type = reader.readInt64();
                        break;
                    case 10:
                        message.memo = reader.readString();
                        break;
                    case 11:
                        message.message_zid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Payment {
            return Payment.deserialize(bytes);
        }
    }
}
