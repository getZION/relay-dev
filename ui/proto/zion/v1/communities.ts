/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/zion/v1/communities.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-gorm/options/gorm";
import * as dependency_2 from "./users";
import * as dependency_3 from "./tags";
import * as dependency_4 from "./conversations";
import * as pb_1 from "google-protobuf";
export namespace proto.zion.v1 {
    export class Community extends pb_1.Message {
        constructor(data?: any[] | {
            id?: number;
            zid?: string;
            name?: string;
            owner_did?: string;
            owner_username?: string;
            description?: string;
            img?: string;
            price_to_join?: number;
            price_per_message?: number;
            escrow_amount?: number;
            last_active?: number;
            public?: boolean;
            deleted?: boolean;
            created?: number;
            updated?: number;
            users?: dependency_2.proto.zion.v1.User[];
            tags?: dependency_3.proto.zion.v1.Tag[];
            conversations?: dependency_4.proto.zion.v1.Conversation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [16, 17, 18], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("zid" in data && data.zid != undefined) {
                    this.zid = data.zid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("owner_did" in data && data.owner_did != undefined) {
                    this.owner_did = data.owner_did;
                }
                if ("owner_username" in data && data.owner_username != undefined) {
                    this.owner_username = data.owner_username;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("img" in data && data.img != undefined) {
                    this.img = data.img;
                }
                if ("price_to_join" in data && data.price_to_join != undefined) {
                    this.price_to_join = data.price_to_join;
                }
                if ("price_per_message" in data && data.price_per_message != undefined) {
                    this.price_per_message = data.price_per_message;
                }
                if ("escrow_amount" in data && data.escrow_amount != undefined) {
                    this.escrow_amount = data.escrow_amount;
                }
                if ("last_active" in data && data.last_active != undefined) {
                    this.last_active = data.last_active;
                }
                if ("public" in data && data.public != undefined) {
                    this.public = data.public;
                }
                if ("deleted" in data && data.deleted != undefined) {
                    this.deleted = data.deleted;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("conversations" in data && data.conversations != undefined) {
                    this.conversations = data.conversations;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get zid() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set zid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get owner_did() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set owner_did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get owner_username() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set owner_username(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get description() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get img() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set img(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get price_to_join() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set price_to_join(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get price_per_message() {
            return pb_1.Message.getField(this, 9) as number;
        }
        set price_per_message(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get escrow_amount() {
            return pb_1.Message.getField(this, 10) as number;
        }
        set escrow_amount(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get last_active() {
            return pb_1.Message.getField(this, 11) as number;
        }
        set last_active(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get public() {
            return pb_1.Message.getField(this, 12) as boolean;
        }
        set public(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get deleted() {
            return pb_1.Message.getField(this, 13) as boolean;
        }
        set deleted(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get created() {
            return pb_1.Message.getField(this, 14) as number;
        }
        set created(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get updated() {
            return pb_1.Message.getField(this, 15) as number;
        }
        set updated(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.proto.zion.v1.User, 16) as dependency_2.proto.zion.v1.User[];
        }
        set users(value: dependency_2.proto.zion.v1.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get tags() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.proto.zion.v1.Tag, 17) as dependency_3.proto.zion.v1.Tag[];
        }
        set tags(value: dependency_3.proto.zion.v1.Tag[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        get conversations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.proto.zion.v1.Conversation, 18) as dependency_4.proto.zion.v1.Conversation[];
        }
        set conversations(value: dependency_4.proto.zion.v1.Conversation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        static fromObject(data: {
            id?: number;
            zid?: string;
            name?: string;
            owner_did?: string;
            owner_username?: string;
            description?: string;
            img?: string;
            price_to_join?: number;
            price_per_message?: number;
            escrow_amount?: number;
            last_active?: number;
            public?: boolean;
            deleted?: boolean;
            created?: number;
            updated?: number;
            users?: ReturnType<typeof dependency_2.proto.zion.v1.User.prototype.toObject>[];
            tags?: ReturnType<typeof dependency_3.proto.zion.v1.Tag.prototype.toObject>[];
            conversations?: ReturnType<typeof dependency_4.proto.zion.v1.Conversation.prototype.toObject>[];
        }) {
            const message = new Community({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.zid != null) {
                message.zid = data.zid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.owner_did != null) {
                message.owner_did = data.owner_did;
            }
            if (data.owner_username != null) {
                message.owner_username = data.owner_username;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.img != null) {
                message.img = data.img;
            }
            if (data.price_to_join != null) {
                message.price_to_join = data.price_to_join;
            }
            if (data.price_per_message != null) {
                message.price_per_message = data.price_per_message;
            }
            if (data.escrow_amount != null) {
                message.escrow_amount = data.escrow_amount;
            }
            if (data.last_active != null) {
                message.last_active = data.last_active;
            }
            if (data.public != null) {
                message.public = data.public;
            }
            if (data.deleted != null) {
                message.deleted = data.deleted;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.updated != null) {
                message.updated = data.updated;
            }
            if (data.users != null) {
                message.users = data.users.map(item => dependency_2.proto.zion.v1.User.fromObject(item));
            }
            if (data.tags != null) {
                message.tags = data.tags.map(item => dependency_3.proto.zion.v1.Tag.fromObject(item));
            }
            if (data.conversations != null) {
                message.conversations = data.conversations.map(item => dependency_4.proto.zion.v1.Conversation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                zid?: string;
                name?: string;
                owner_did?: string;
                owner_username?: string;
                description?: string;
                img?: string;
                price_to_join?: number;
                price_per_message?: number;
                escrow_amount?: number;
                last_active?: number;
                public?: boolean;
                deleted?: boolean;
                created?: number;
                updated?: number;
                users?: ReturnType<typeof dependency_2.proto.zion.v1.User.prototype.toObject>[];
                tags?: ReturnType<typeof dependency_3.proto.zion.v1.Tag.prototype.toObject>[];
                conversations?: ReturnType<typeof dependency_4.proto.zion.v1.Conversation.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.zid != null) {
                data.zid = this.zid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.owner_did != null) {
                data.owner_did = this.owner_did;
            }
            if (this.owner_username != null) {
                data.owner_username = this.owner_username;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.img != null) {
                data.img = this.img;
            }
            if (this.price_to_join != null) {
                data.price_to_join = this.price_to_join;
            }
            if (this.price_per_message != null) {
                data.price_per_message = this.price_per_message;
            }
            if (this.escrow_amount != null) {
                data.escrow_amount = this.escrow_amount;
            }
            if (this.last_active != null) {
                data.last_active = this.last_active;
            }
            if (this.public != null) {
                data.public = this.public;
            }
            if (this.deleted != null) {
                data.deleted = this.deleted;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.updated != null) {
                data.updated = this.updated;
            }
            if (this.users != null) {
                data.users = this.users.map((item: dependency_2.proto.zion.v1.User) => item.toObject());
            }
            if (this.tags != null) {
                data.tags = this.tags.map((item: dependency_3.proto.zion.v1.Tag) => item.toObject());
            }
            if (this.conversations != null) {
                data.conversations = this.conversations.map((item: dependency_4.proto.zion.v1.Conversation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeInt64(1, this.id);
            if (typeof this.zid === "string" && this.zid.length)
                writer.writeString(2, this.zid);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(3, this.name);
            if (typeof this.owner_did === "string" && this.owner_did.length)
                writer.writeString(4, this.owner_did);
            if (typeof this.owner_username === "string" && this.owner_username.length)
                writer.writeString(5, this.owner_username);
            if (typeof this.description === "string" && this.description.length)
                writer.writeString(6, this.description);
            if (typeof this.img === "string" && this.img.length)
                writer.writeString(7, this.img);
            if (this.price_to_join !== undefined)
                writer.writeInt64(8, this.price_to_join);
            if (this.price_per_message !== undefined)
                writer.writeInt64(9, this.price_per_message);
            if (this.escrow_amount !== undefined)
                writer.writeInt64(10, this.escrow_amount);
            if (this.last_active !== undefined)
                writer.writeInt64(11, this.last_active);
            if (this.public !== undefined)
                writer.writeBool(12, this.public);
            if (this.deleted !== undefined)
                writer.writeBool(13, this.deleted);
            if (this.created !== undefined)
                writer.writeInt64(14, this.created);
            if (this.updated !== undefined)
                writer.writeInt64(15, this.updated);
            if (this.users !== undefined)
                writer.writeRepeatedMessage(16, this.users, (item: dependency_2.proto.zion.v1.User) => item.serialize(writer));
            if (this.tags !== undefined)
                writer.writeRepeatedMessage(17, this.tags, (item: dependency_3.proto.zion.v1.Tag) => item.serialize(writer));
            if (this.conversations !== undefined)
                writer.writeRepeatedMessage(18, this.conversations, (item: dependency_4.proto.zion.v1.Conversation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Community {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Community();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.zid = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.owner_did = reader.readString();
                        break;
                    case 5:
                        message.owner_username = reader.readString();
                        break;
                    case 6:
                        message.description = reader.readString();
                        break;
                    case 7:
                        message.img = reader.readString();
                        break;
                    case 8:
                        message.price_to_join = reader.readInt64();
                        break;
                    case 9:
                        message.price_per_message = reader.readInt64();
                        break;
                    case 10:
                        message.escrow_amount = reader.readInt64();
                        break;
                    case 11:
                        message.last_active = reader.readInt64();
                        break;
                    case 12:
                        message.public = reader.readBool();
                        break;
                    case 13:
                        message.deleted = reader.readBool();
                        break;
                    case 14:
                        message.created = reader.readInt64();
                        break;
                    case 15:
                        message.updated = reader.readInt64();
                        break;
                    case 16:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 16, dependency_2.proto.zion.v1.User.deserialize(reader), dependency_2.proto.zion.v1.User));
                        break;
                    case 17:
                        reader.readMessage(message.tags, () => pb_1.Message.addToRepeatedWrapperField(message, 17, dependency_3.proto.zion.v1.Tag.deserialize(reader), dependency_3.proto.zion.v1.Tag));
                        break;
                    case 18:
                        reader.readMessage(message.conversations, () => pb_1.Message.addToRepeatedWrapperField(message, 18, dependency_4.proto.zion.v1.Conversation.deserialize(reader), dependency_4.proto.zion.v1.Conversation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Community {
            return Community.deserialize(bytes);
        }
    }
}
