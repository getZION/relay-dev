/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/zion/v1/comments.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-gorm/options/gorm";
import * as pb_1 from "google-protobuf";
export namespace proto.zion.v1 {
    export class Comment extends pb_1.Message {
        constructor(data?: any[] | {
            id?: number;
            zid?: string;
            conversation_zid?: string;
            user_did?: string;
            text?: string;
            link?: string;
            created?: number;
            updated?: number;
            deleted?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("zid" in data && data.zid != undefined) {
                    this.zid = data.zid;
                }
                if ("conversation_zid" in data && data.conversation_zid != undefined) {
                    this.conversation_zid = data.conversation_zid;
                }
                if ("user_did" in data && data.user_did != undefined) {
                    this.user_did = data.user_did;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("link" in data && data.link != undefined) {
                    this.link = data.link;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("deleted" in data && data.deleted != undefined) {
                    this.deleted = data.deleted;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get zid() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set zid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get conversation_zid() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set conversation_zid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_did() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set user_did(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get text() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get link() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set link(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get created() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set created(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set updated(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get deleted() {
            return pb_1.Message.getField(this, 9) as boolean;
        }
        set deleted(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: number;
            zid?: string;
            conversation_zid?: string;
            user_did?: string;
            text?: string;
            link?: string;
            created?: number;
            updated?: number;
            deleted?: boolean;
        }) {
            const message = new Comment({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.zid != null) {
                message.zid = data.zid;
            }
            if (data.conversation_zid != null) {
                message.conversation_zid = data.conversation_zid;
            }
            if (data.user_did != null) {
                message.user_did = data.user_did;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.link != null) {
                message.link = data.link;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.updated != null) {
                message.updated = data.updated;
            }
            if (data.deleted != null) {
                message.deleted = data.deleted;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                zid?: string;
                conversation_zid?: string;
                user_did?: string;
                text?: string;
                link?: string;
                created?: number;
                updated?: number;
                deleted?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.zid != null) {
                data.zid = this.zid;
            }
            if (this.conversation_zid != null) {
                data.conversation_zid = this.conversation_zid;
            }
            if (this.user_did != null) {
                data.user_did = this.user_did;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.link != null) {
                data.link = this.link;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.updated != null) {
                data.updated = this.updated;
            }
            if (this.deleted != null) {
                data.deleted = this.deleted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeInt64(1, this.id);
            if (typeof this.zid === "string" && this.zid.length)
                writer.writeString(2, this.zid);
            if (typeof this.conversation_zid === "string" && this.conversation_zid.length)
                writer.writeString(3, this.conversation_zid);
            if (typeof this.user_did === "string" && this.user_did.length)
                writer.writeString(4, this.user_did);
            if (typeof this.text === "string" && this.text.length)
                writer.writeString(5, this.text);
            if (typeof this.link === "string" && this.link.length)
                writer.writeString(6, this.link);
            if (this.created !== undefined)
                writer.writeInt64(7, this.created);
            if (this.updated !== undefined)
                writer.writeInt64(8, this.updated);
            if (this.deleted !== undefined)
                writer.writeBool(9, this.deleted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Comment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Comment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.zid = reader.readString();
                        break;
                    case 3:
                        message.conversation_zid = reader.readString();
                        break;
                    case 4:
                        message.user_did = reader.readString();
                        break;
                    case 5:
                        message.text = reader.readString();
                        break;
                    case 6:
                        message.link = reader.readString();
                        break;
                    case 7:
                        message.created = reader.readInt64();
                        break;
                    case 8:
                        message.updated = reader.readInt64();
                        break;
                    case 9:
                        message.deleted = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Comment {
            return Comment.deserialize(bytes);
        }
    }
}
