/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: proto/zion/v1/tags.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-gorm/options/gorm";
import * as pb_1 from "google-protobuf";
export namespace proto.zion.v1 {
    export class Tag extends pb_1.Message {
        constructor(data?: any[] | {
            id?: number;
            tag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tag() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            tag?: string;
        }) {
            const message = new Tag({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.tag != null) {
                message.tag = data.tag;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                tag?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.tag != null) {
                data.tag = this.tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeInt64(1, this.id);
            if (typeof this.tag === "string" && this.tag.length)
                writer.writeString(2, this.tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tag {
            return Tag.deserialize(bytes);
        }
    }
}
