// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/zion/v1/nodeinfo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeInfoServiceClient is the client API for NodeInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeInfoServiceClient interface {
	// Return node pubkey and balance
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
}

type nodeInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeInfoServiceClient(cc grpc.ClientConnInterface) NodeInfoServiceClient {
	return &nodeInfoServiceClient{cc}
}

func (c *nodeInfoServiceClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.zion.v1.NodeInfoService/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeInfoServiceServer is the server API for NodeInfoService service.
// All implementations should embed UnimplementedNodeInfoServiceServer
// for forward compatibility
type NodeInfoServiceServer interface {
	// Return node pubkey and balance
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
}

// UnimplementedNodeInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeInfoServiceServer struct {
}

func (UnimplementedNodeInfoServiceServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}

// UnsafeNodeInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeInfoServiceServer will
// result in compilation errors.
type UnsafeNodeInfoServiceServer interface {
	mustEmbedUnimplementedNodeInfoServiceServer()
}

func RegisterNodeInfoServiceServer(s grpc.ServiceRegistrar, srv NodeInfoServiceServer) {
	s.RegisterService(&NodeInfoService_ServiceDesc, srv)
}

func _NodeInfoService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeInfoServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.zion.v1.NodeInfoService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeInfoServiceServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeInfoService_ServiceDesc is the grpc.ServiceDesc for NodeInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.zion.v1.NodeInfoService",
	HandlerType: (*NodeInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _NodeInfoService_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zion/v1/nodeinfo.proto",
}
