// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PaymentsServiceClient is the client API for PaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentsServiceClient interface {
	// Create invoice to fund account
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	// Get my payments history
	GetPaymentsHistory(ctx context.Context, in *GetPaymentsHistoryRequest, opts ...grpc.CallOption) (*GetPaymentsHistoryResponse, error)
	// Pay Lightning invoice
	PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceResponse, error)
	// Send sats to another user
	PayUser(ctx context.Context, in *PayUserRequest, opts ...grpc.CallOption) (*PayUserResponse, error)
}

type paymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsServiceClient(cc grpc.ClientConnInterface) PaymentsServiceClient {
	return &paymentsServiceClient{cc}
}

func (c *paymentsServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/proto.zion.v1.PaymentsService/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPaymentsHistory(ctx context.Context, in *GetPaymentsHistoryRequest, opts ...grpc.CallOption) (*GetPaymentsHistoryResponse, error) {
	out := new(GetPaymentsHistoryResponse)
	err := c.cc.Invoke(ctx, "/proto.zion.v1.PaymentsService/GetPaymentsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceResponse, error) {
	out := new(PayInvoiceResponse)
	err := c.cc.Invoke(ctx, "/proto.zion.v1.PaymentsService/PayInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) PayUser(ctx context.Context, in *PayUserRequest, opts ...grpc.CallOption) (*PayUserResponse, error) {
	out := new(PayUserResponse)
	err := c.cc.Invoke(ctx, "/proto.zion.v1.PaymentsService/PayUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsServiceServer is the server API for PaymentsService service.
// All implementations should embed UnimplementedPaymentsServiceServer
// for forward compatibility
type PaymentsServiceServer interface {
	// Create invoice to fund account
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	// Get my payments history
	GetPaymentsHistory(context.Context, *GetPaymentsHistoryRequest) (*GetPaymentsHistoryResponse, error)
	// Pay Lightning invoice
	PayInvoice(context.Context, *PayInvoiceRequest) (*PayInvoiceResponse, error)
	// Send sats to another user
	PayUser(context.Context, *PayUserRequest) (*PayUserResponse, error)
}

// UnimplementedPaymentsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentsServiceServer struct {
}

func (UnimplementedPaymentsServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPaymentsHistory(context.Context, *GetPaymentsHistoryRequest) (*GetPaymentsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsHistory not implemented")
}
func (UnimplementedPaymentsServiceServer) PayInvoice(context.Context, *PayInvoiceRequest) (*PayInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInvoice not implemented")
}
func (UnimplementedPaymentsServiceServer) PayUser(context.Context, *PayUserRequest) (*PayUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayUser not implemented")
}

// UnsafePaymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsServiceServer will
// result in compilation errors.
type UnsafePaymentsServiceServer interface {
	mustEmbedUnimplementedPaymentsServiceServer()
}

func RegisterPaymentsServiceServer(s grpc.ServiceRegistrar, srv PaymentsServiceServer) {
	s.RegisterService(&_PaymentsService_serviceDesc, srv)
}

func _PaymentsService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.zion.v1.PaymentsService/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPaymentsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPaymentsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.zion.v1.PaymentsService/GetPaymentsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPaymentsHistory(ctx, req.(*GetPaymentsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_PayInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).PayInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.zion.v1.PaymentsService/PayInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).PayInvoice(ctx, req.(*PayInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_PayUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).PayUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.zion.v1.PaymentsService/PayUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).PayUser(ctx, req.(*PayUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.zion.v1.PaymentsService",
	HandlerType: (*PaymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _PaymentsService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetPaymentsHistory",
			Handler:    _PaymentsService_GetPaymentsHistory_Handler,
		},
		{
			MethodName: "PayInvoice",
			Handler:    _PaymentsService_PayInvoice_Handler,
		},
		{
			MethodName: "PayUser",
			Handler:    _PaymentsService_PayUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zion/v1/payments.proto",
}
