package v1

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	strings "strings"
)

type ConversationORM struct {
	CommunityZid string
	Id           int64       `gorm:"primary_key;unique"`
	Message      *MessageORM `gorm:"foreignkey:ConversationId;association_foreignkey:Id"`
	Public       bool
	PublicPrice  int64
	Zid          string
}

// TableName overrides the default tablename generated by GORM
func (ConversationORM) TableName() string {
	return "conversations"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Conversation) ToORM(ctx context.Context) (ConversationORM, error) {
	to := ConversationORM{}
	var err error
	if prehook, ok := interface{}(m).(ConversationWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Zid = m.Zid
	to.CommunityZid = m.CommunityZid
	if m.Message != nil {
		tempMessage, err := m.Message.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Message = &tempMessage
	}
	to.Public = m.Public
	to.PublicPrice = m.PublicPrice
	if posthook, ok := interface{}(m).(ConversationWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ConversationORM) ToPB(ctx context.Context) (Conversation, error) {
	to := Conversation{}
	var err error
	if prehook, ok := interface{}(m).(ConversationWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Zid = m.Zid
	to.CommunityZid = m.CommunityZid
	if m.Message != nil {
		tempMessage, err := m.Message.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Message = &tempMessage
	}
	to.Public = m.Public
	to.PublicPrice = m.PublicPrice
	if posthook, ok := interface{}(m).(ConversationWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Conversation the arg will be the target, the caller the one being converted from

// ConversationBeforeToORM called before default ToORM code
type ConversationWithBeforeToORM interface {
	BeforeToORM(context.Context, *ConversationORM) error
}

// ConversationAfterToORM called after default ToORM code
type ConversationWithAfterToORM interface {
	AfterToORM(context.Context, *ConversationORM) error
}

// ConversationBeforeToPB called before default ToPB code
type ConversationWithBeforeToPB interface {
	BeforeToPB(context.Context, *Conversation) error
}

// ConversationAfterToPB called after default ToPB code
type ConversationWithAfterToPB interface {
	AfterToPB(context.Context, *Conversation) error
}

// DefaultCreateConversation executes a basic gorm create call
func DefaultCreateConversation(ctx context.Context, in *Conversation, db *gorm.DB) (*Conversation, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ConversationORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadConversation(ctx context.Context, in *Conversation, db *gorm.DB) (*Conversation, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ConversationORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ConversationORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ConversationORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ConversationORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteConversation(ctx context.Context, in *Conversation, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ConversationORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ConversationORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteConversationSet(ctx context.Context, in []*Conversation, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ConversationORM{})).(ConversationORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ConversationORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ConversationORM{})).(ConversationORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ConversationORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Conversation, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Conversation, *gorm.DB) error
}

// DefaultStrictUpdateConversation clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateConversation(ctx context.Context, in *Conversation, db *gorm.DB) (*Conversation, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateConversation")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ConversationORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterMessage := MessageORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterMessage.ConversationId = new(int64)
	*filterMessage.ConversationId = ormObj.Id
	if err = db.Where(filterMessage).Delete(MessageORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ConversationORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchConversation executes a basic gorm update call with patch behavior
func DefaultPatchConversation(ctx context.Context, in *Conversation, updateMask *field_mask.FieldMask, db *gorm.DB) (*Conversation, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Conversation
	var err error
	if hook, ok := interface{}(&pbObj).(ConversationWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadConversation(ctx, &Conversation{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ConversationWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskConversation(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ConversationWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateConversation(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ConversationWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ConversationWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Conversation, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConversationWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Conversation, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConversationWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Conversation, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConversationWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Conversation, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetConversation executes a bulk gorm update call with patch behavior
func DefaultPatchSetConversation(ctx context.Context, objects []*Conversation, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Conversation, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Conversation, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchConversation(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskConversation patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskConversation(ctx context.Context, patchee *Conversation, patcher *Conversation, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Conversation, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedMessage bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Zid" {
			patchee.Zid = patcher.Zid
			continue
		}
		if f == prefix+"CommunityZid" {
			patchee.CommunityZid = patcher.CommunityZid
			continue
		}
		if !updatedMessage && strings.HasPrefix(f, prefix+"Message.") {
			updatedMessage = true
			if patcher.Message == nil {
				patchee.Message = nil
				continue
			}
			if patchee.Message == nil {
				patchee.Message = &Message{}
			}
			if o, err := DefaultApplyFieldMaskMessage(ctx, patchee.Message, patcher.Message, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Message.", db); err != nil {
				return nil, err
			} else {
				patchee.Message = o
			}
			continue
		}
		if f == prefix+"Message" {
			updatedMessage = true
			patchee.Message = patcher.Message
			continue
		}
		if f == prefix+"Public" {
			patchee.Public = patcher.Public
			continue
		}
		if f == prefix+"PublicPrice" {
			patchee.PublicPrice = patcher.PublicPrice
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListConversation executes a gorm list call
func DefaultListConversation(ctx context.Context, db *gorm.DB) ([]*Conversation, error) {
	in := Conversation{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ConversationORM{}, &Conversation{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ConversationORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConversationORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Conversation{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ConversationORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConversationORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ConversationORM) error
}
