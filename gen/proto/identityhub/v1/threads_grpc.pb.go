// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ThreadsServiceClient is the client API for ThreadsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadsServiceClient interface {
	ThreadsQuery(ctx context.Context, in *ThreadsQueryRequest, opts ...grpc.CallOption) (*ThreadsQueryResponse, error)
	ThreadsCreate(ctx context.Context, in *ThreadsCreateRequest, opts ...grpc.CallOption) (*ThreadsCreateResponse, error)
	ThreadsReply(ctx context.Context, in *ThreadsReplyRequest, opts ...grpc.CallOption) (*ThreadsReplyResponse, error)
	ThreadsClose(ctx context.Context, in *ThreadsCloseRequest, opts ...grpc.CallOption) (*ThreadsCloseResponse, error)
	ThreadsDelete(ctx context.Context, in *ThreadsDeleteRequest, opts ...grpc.CallOption) (*ThreadsDeleteResponse, error)
}

type threadsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadsServiceClient(cc grpc.ClientConnInterface) ThreadsServiceClient {
	return &threadsServiceClient{cc}
}

func (c *threadsServiceClient) ThreadsQuery(ctx context.Context, in *ThreadsQueryRequest, opts ...grpc.CallOption) (*ThreadsQueryResponse, error) {
	out := new(ThreadsQueryResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.ThreadsService/ThreadsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsServiceClient) ThreadsCreate(ctx context.Context, in *ThreadsCreateRequest, opts ...grpc.CallOption) (*ThreadsCreateResponse, error) {
	out := new(ThreadsCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.ThreadsService/ThreadsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsServiceClient) ThreadsReply(ctx context.Context, in *ThreadsReplyRequest, opts ...grpc.CallOption) (*ThreadsReplyResponse, error) {
	out := new(ThreadsReplyResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.ThreadsService/ThreadsReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsServiceClient) ThreadsClose(ctx context.Context, in *ThreadsCloseRequest, opts ...grpc.CallOption) (*ThreadsCloseResponse, error) {
	out := new(ThreadsCloseResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.ThreadsService/ThreadsClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsServiceClient) ThreadsDelete(ctx context.Context, in *ThreadsDeleteRequest, opts ...grpc.CallOption) (*ThreadsDeleteResponse, error) {
	out := new(ThreadsDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.ThreadsService/ThreadsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadsServiceServer is the server API for ThreadsService service.
// All implementations should embed UnimplementedThreadsServiceServer
// for forward compatibility
type ThreadsServiceServer interface {
	ThreadsQuery(context.Context, *ThreadsQueryRequest) (*ThreadsQueryResponse, error)
	ThreadsCreate(context.Context, *ThreadsCreateRequest) (*ThreadsCreateResponse, error)
	ThreadsReply(context.Context, *ThreadsReplyRequest) (*ThreadsReplyResponse, error)
	ThreadsClose(context.Context, *ThreadsCloseRequest) (*ThreadsCloseResponse, error)
	ThreadsDelete(context.Context, *ThreadsDeleteRequest) (*ThreadsDeleteResponse, error)
}

// UnimplementedThreadsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedThreadsServiceServer struct {
}

func (UnimplementedThreadsServiceServer) ThreadsQuery(context.Context, *ThreadsQueryRequest) (*ThreadsQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsQuery not implemented")
}
func (UnimplementedThreadsServiceServer) ThreadsCreate(context.Context, *ThreadsCreateRequest) (*ThreadsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsCreate not implemented")
}
func (UnimplementedThreadsServiceServer) ThreadsReply(context.Context, *ThreadsReplyRequest) (*ThreadsReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsReply not implemented")
}
func (UnimplementedThreadsServiceServer) ThreadsClose(context.Context, *ThreadsCloseRequest) (*ThreadsCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsClose not implemented")
}
func (UnimplementedThreadsServiceServer) ThreadsDelete(context.Context, *ThreadsDeleteRequest) (*ThreadsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThreadsDelete not implemented")
}

// UnsafeThreadsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadsServiceServer will
// result in compilation errors.
type UnsafeThreadsServiceServer interface {
	mustEmbedUnimplementedThreadsServiceServer()
}

func RegisterThreadsServiceServer(s grpc.ServiceRegistrar, srv ThreadsServiceServer) {
	s.RegisterService(&_ThreadsService_serviceDesc, srv)
}

func _ThreadsService_ThreadsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServiceServer).ThreadsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.ThreadsService/ThreadsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServiceServer).ThreadsQuery(ctx, req.(*ThreadsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadsService_ThreadsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServiceServer).ThreadsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.ThreadsService/ThreadsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServiceServer).ThreadsCreate(ctx, req.(*ThreadsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadsService_ThreadsReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServiceServer).ThreadsReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.ThreadsService/ThreadsReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServiceServer).ThreadsReply(ctx, req.(*ThreadsReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadsService_ThreadsClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServiceServer).ThreadsClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.ThreadsService/ThreadsClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServiceServer).ThreadsClose(ctx, req.(*ThreadsCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadsService_ThreadsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServiceServer).ThreadsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.ThreadsService/ThreadsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServiceServer).ThreadsDelete(ctx, req.(*ThreadsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThreadsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.identityhub.v1.ThreadsService",
	HandlerType: (*ThreadsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThreadsQuery",
			Handler:    _ThreadsService_ThreadsQuery_Handler,
		},
		{
			MethodName: "ThreadsCreate",
			Handler:    _ThreadsService_ThreadsCreate_Handler,
		},
		{
			MethodName: "ThreadsReply",
			Handler:    _ThreadsService_ThreadsReply_Handler,
		},
		{
			MethodName: "ThreadsClose",
			Handler:    _ThreadsService_ThreadsClose_Handler,
		},
		{
			MethodName: "ThreadsDelete",
			Handler:    _ThreadsService_ThreadsDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identityhub/v1/threads.proto",
}
