// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HubRequestServiceClient is the client API for HubRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubRequestServiceClient interface {
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type hubRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubRequestServiceClient(cc grpc.ClientConnInterface) HubRequestServiceClient {
	return &hubRequestServiceClient{cc}
}

func (c *hubRequestServiceClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.HubRequestService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubRequestServiceServer is the server API for HubRequestService service.
// All implementations should embed UnimplementedHubRequestServiceServer
// for forward compatibility
type HubRequestServiceServer interface {
	Process(context.Context, *Request) (*Response, error)
}

// UnimplementedHubRequestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHubRequestServiceServer struct {
}

func (UnimplementedHubRequestServiceServer) Process(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}

// UnsafeHubRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubRequestServiceServer will
// result in compilation errors.
type UnsafeHubRequestServiceServer interface {
	mustEmbedUnimplementedHubRequestServiceServer()
}

func RegisterHubRequestServiceServer(s grpc.ServiceRegistrar, srv HubRequestServiceServer) {
	s.RegisterService(&_HubRequestService_serviceDesc, srv)
}

func _HubRequestService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubRequestServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.HubRequestService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubRequestServiceServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubRequestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.identityhub.v1.HubRequestService",
	HandlerType: (*HubRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _HubRequestService_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identityhub/v1/identityhub.proto",
}
