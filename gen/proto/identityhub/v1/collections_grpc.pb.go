// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CollectionsServiceClient is the client API for CollectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionsServiceClient interface {
	CollectionsQuery(ctx context.Context, in *CollectionsQueryRequest, opts ...grpc.CallOption) (*CollectionsQueryResponse, error)
	CollectionsWrite(ctx context.Context, in *CollectionsWriteRequest, opts ...grpc.CallOption) (*CollectionsWriteResponse, error)
	CollectionsCommit(ctx context.Context, in *CollectionsCommitRequest, opts ...grpc.CallOption) (*CollectionsCommitResponse, error)
	CollectionsDelete(ctx context.Context, in *CollectionsDeleteRequest, opts ...grpc.CallOption) (*CollectionsDeleteResponse, error)
}

type collectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionsServiceClient(cc grpc.ClientConnInterface) CollectionsServiceClient {
	return &collectionsServiceClient{cc}
}

func (c *collectionsServiceClient) CollectionsQuery(ctx context.Context, in *CollectionsQueryRequest, opts ...grpc.CallOption) (*CollectionsQueryResponse, error) {
	out := new(CollectionsQueryResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.CollectionsService/CollectionsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsServiceClient) CollectionsWrite(ctx context.Context, in *CollectionsWriteRequest, opts ...grpc.CallOption) (*CollectionsWriteResponse, error) {
	out := new(CollectionsWriteResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.CollectionsService/CollectionsWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsServiceClient) CollectionsCommit(ctx context.Context, in *CollectionsCommitRequest, opts ...grpc.CallOption) (*CollectionsCommitResponse, error) {
	out := new(CollectionsCommitResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.CollectionsService/CollectionsCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionsServiceClient) CollectionsDelete(ctx context.Context, in *CollectionsDeleteRequest, opts ...grpc.CallOption) (*CollectionsDeleteResponse, error) {
	out := new(CollectionsDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.identityhub.v1.CollectionsService/CollectionsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionsServiceServer is the server API for CollectionsService service.
// All implementations should embed UnimplementedCollectionsServiceServer
// for forward compatibility
type CollectionsServiceServer interface {
	CollectionsQuery(context.Context, *CollectionsQueryRequest) (*CollectionsQueryResponse, error)
	CollectionsWrite(context.Context, *CollectionsWriteRequest) (*CollectionsWriteResponse, error)
	CollectionsCommit(context.Context, *CollectionsCommitRequest) (*CollectionsCommitResponse, error)
	CollectionsDelete(context.Context, *CollectionsDeleteRequest) (*CollectionsDeleteResponse, error)
}

// UnimplementedCollectionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollectionsServiceServer struct {
}

func (UnimplementedCollectionsServiceServer) CollectionsQuery(context.Context, *CollectionsQueryRequest) (*CollectionsQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsQuery not implemented")
}
func (UnimplementedCollectionsServiceServer) CollectionsWrite(context.Context, *CollectionsWriteRequest) (*CollectionsWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsWrite not implemented")
}
func (UnimplementedCollectionsServiceServer) CollectionsCommit(context.Context, *CollectionsCommitRequest) (*CollectionsCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsCommit not implemented")
}
func (UnimplementedCollectionsServiceServer) CollectionsDelete(context.Context, *CollectionsDeleteRequest) (*CollectionsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsDelete not implemented")
}

// UnsafeCollectionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionsServiceServer will
// result in compilation errors.
type UnsafeCollectionsServiceServer interface {
	mustEmbedUnimplementedCollectionsServiceServer()
}

func RegisterCollectionsServiceServer(s grpc.ServiceRegistrar, srv CollectionsServiceServer) {
	s.RegisterService(&_CollectionsService_serviceDesc, srv)
}

func _CollectionsService_CollectionsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServiceServer).CollectionsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.CollectionsService/CollectionsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServiceServer).CollectionsQuery(ctx, req.(*CollectionsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsService_CollectionsWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionsWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServiceServer).CollectionsWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.CollectionsService/CollectionsWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServiceServer).CollectionsWrite(ctx, req.(*CollectionsWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsService_CollectionsCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionsCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServiceServer).CollectionsCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.CollectionsService/CollectionsCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServiceServer).CollectionsCommit(ctx, req.(*CollectionsCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionsService_CollectionsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionsServiceServer).CollectionsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.identityhub.v1.CollectionsService/CollectionsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionsServiceServer).CollectionsDelete(ctx, req.(*CollectionsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.identityhub.v1.CollectionsService",
	HandlerType: (*CollectionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectionsQuery",
			Handler:    _CollectionsService_CollectionsQuery_Handler,
		},
		{
			MethodName: "CollectionsWrite",
			Handler:    _CollectionsService_CollectionsWrite_Handler,
		},
		{
			MethodName: "CollectionsCommit",
			Handler:    _CollectionsService_CollectionsCommit_Handler,
		},
		{
			MethodName: "CollectionsDelete",
			Handler:    _CollectionsService_CollectionsDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identityhub/v1/collections.proto",
}
